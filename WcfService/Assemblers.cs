#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace WcfService.Assemblers
{
	using Telerik.OpenAccess;
	using WcfService.Dto;
	using WcfService.Converters;
	using DataLayer;
	using System;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.Serialization;

			
	public partial interface IAssembler<TDto, TEntity>
	    where TEntity : class
	{
	    TDto Assemble(TEntity entity);
	    TEntity Assemble(TEntity entity, TDto dto);
	
	    IEnumerable<TDto> Assemble(IEnumerable<TEntity> entityList);
	    IEnumerable<TEntity> Assemble(IEnumerable<TDto> dtoList);
	}
	
	public abstract class Assembler<TDto, TEntity> : IAssembler<TDto, TEntity>
	    where TEntity : class
	{
	    public abstract TDto Assemble(TEntity domainEntity);
	    public abstract TEntity Assemble(TEntity entity, TDto dto);
	
	    public void AssembleNavigational(TEntity entity, TDto dto)
	    {
	    	this.AssembleReferences(entity, dto);
	    	this.AssembleCollections(entity, dto);
	    }
	
	    public abstract void AssembleReferences(TEntity entity, TDto dto);
	    public abstract void AssembleCollections(TEntity entity, TDto dto);
	
	
	    public virtual IEnumerable<TDto> Assemble(IEnumerable<TEntity> domainEntityList)
	    {
	        List<TDto> dtos = Activator.CreateInstance<List<TDto>>();
	        foreach (TEntity domainEntity in domainEntityList)
	        {
	            dtos.Add(Assemble(domainEntity));
	        }
	        return dtos;
	    }
	
	    public virtual IEnumerable<TEntity> Assemble(IEnumerable<TDto> dtoList)
	    {
	        List<TEntity> domainEntities = Activator.CreateInstance<List<TEntity>>();
	        foreach (TDto dto in dtoList)
	        {
	            domainEntities.Add(Assemble(null, dto));
	        }
	        return domainEntities;
	    }
	}
	
	public partial interface IAziendaAssembler : IAssembler<AziendaDto, Azienda>
	{ 
	
	}
	
	public partial class AziendaAssemblerBase : Assembler<AziendaDto, Azienda>
	{
		/// <summary>
	    /// Invoked after the AziendaDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="AziendaDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(AziendaDto dto);
	
		/// <summary>
	    /// Invoked after the Azienda instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Azienda"/> instance.</param>
		partial void OnEntityAssembled(Azienda entity);
		
	    public override Azienda Assemble(Azienda entity, AziendaDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Azienda();
	        }
			
			entity.Id = dto.Id;
			entity.RagioneSociale = dto.RagioneSociale;
			entity.Indirizzo = dto.Indirizzo;
			entity.CAP = dto.CAP;
			entity.Comune = dto.Comune;
			entity.Provincia = dto.Provincia;
			entity.PartitaIva = dto.PartitaIva;
			entity.Dipendenti = dto.Dipendenti;
			entity.Telefono = dto.Telefono;
			entity.Fax = dto.Fax;
			entity.Email = dto.Email;
			entity.Codice = dto.Codice;
			entity.CodiceCatastale = dto.CodiceCatastale;
			entity.Localita = dto.Localita;
			entity.Note = dto.Note;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override AziendaDto Assemble(Azienda entity)
	    {
	        AziendaDto dto = new AziendaDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.RagioneSociale = entity.RagioneSociale;
			dto.Indirizzo = entity.Indirizzo;
			dto.CAP = entity.CAP;
			dto.Comune = entity.Comune;
			dto.Provincia = entity.Provincia;
			dto.PartitaIva = entity.PartitaIva;
			dto.Dipendenti = entity.Dipendenti;
			dto.Telefono = entity.Telefono;
			dto.Fax = entity.Fax;
			dto.Email = entity.Email;
			dto.Codice = entity.Codice;
			dto.CodiceCatastale = entity.CodiceCatastale;
			dto.Localita = entity.Localita;
			dto.Note = entity.Note;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Azienda entity, AziendaDto dto)
	    {
	    }
	
	    public override void AssembleCollections(Azienda entity, AziendaDto dto)
	    {
			CommessaAssembler commessaAssembler = new CommessaAssembler();

			dto.Commessas = new List<CommessaDto>();
			foreach (Commessa item in entity.Commessas)
			{
				var dtoItem = commessaAssembler.Assemble(item);
				dtoItem.Azienda = dto;
				dto.Commessas.Add(dtoItem);
			}

			AccountAssembler accountAssembler = new AccountAssembler();

			dto.Accounts = new List<AccountDto>();
			foreach (Account item in entity.Accounts)
			{
				var dtoItem = accountAssembler.Assemble(item);
				dtoItem.Azienda = dto;
				dto.Accounts.Add(dtoItem);
			}

			ReportJobAssembler reportJobAssembler = new ReportJobAssembler();

			dto.ReportJobs = new List<ReportJobDto>();
			foreach (ReportJob item in entity.ReportJobs)
			{
				var dtoItem = reportJobAssembler.Assemble(item);
				dtoItem.Azienda = dto;
				dto.ReportJobs.Add(dtoItem);
			}

			PagamentoUnificatoAssembler pagamentoUnificatoAssembler = new PagamentoUnificatoAssembler();

			dto.PagamentoUnificatos = new List<PagamentoUnificatoDto>();
			foreach (PagamentoUnificato item in entity.PagamentoUnificatos)
			{
				var dtoItem = pagamentoUnificatoAssembler.Assemble(item);
				dtoItem.Azienda = dto;
				dto.PagamentoUnificatos.Add(dtoItem);
			}

			AnagraficaFornitoreAssembler anagraficaFornitoreAssembler = new AnagraficaFornitoreAssembler();

			dto.AnagraficaFornitores = new List<AnagraficaFornitoreDto>();
			foreach (AnagraficaFornitore item in entity.AnagraficaFornitores)
			{
				var dtoItem = anagraficaFornitoreAssembler.Assemble(item);
				dtoItem.Azienda = dto;
				dto.AnagraficaFornitores.Add(dtoItem);
			}

			AnagraficaCommittenteAssembler anagraficaCommittenteAssembler = new AnagraficaCommittenteAssembler();

			dto.AnagraficaCommittentes = new List<AnagraficaCommittenteDto>();
			foreach (AnagraficaCommittente item in entity.AnagraficaCommittentes)
			{
				var dtoItem = anagraficaCommittenteAssembler.Assemble(item);
				dtoItem.Azienda = dto;
				dto.AnagraficaCommittentes.Add(dtoItem);
			}

			AnagraficaArticoloAssembler anagraficaArticoloAssembler = new AnagraficaArticoloAssembler();

			dto.AnagraficaArticolos = new List<AnagraficaArticoloDto>();
			foreach (AnagraficaArticolo item in entity.AnagraficaArticolos)
			{
				var dtoItem = anagraficaArticoloAssembler.Assemble(item);
				dtoItem.Azienda = dto;
				dto.AnagraficaArticolos.Add(dtoItem);
			}

			CentroCostoAssembler centroCostoAssembler = new CentroCostoAssembler();

			dto.CentroCostos = new List<CentroCostoDto>();
			foreach (CentroCosto item in entity.CentroCostos)
			{
				var dtoItem = centroCostoAssembler.Assemble(item);
				dtoItem.Azienda = dto;
				dto.CentroCostos.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class AziendaAssembler : AziendaAssemblerBase, IAziendaAssembler
	{
	    
	}
	
	public partial interface ICommessaAssembler : IAssembler<CommessaDto, Commessa>
	{ 
	
	}
	
	public partial class CommessaAssemblerBase : Assembler<CommessaDto, Commessa>
	{
		/// <summary>
	    /// Invoked after the CommessaDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="CommessaDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(CommessaDto dto);
	
		/// <summary>
	    /// Invoked after the Commessa instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Commessa"/> instance.</param>
		partial void OnEntityAssembled(Commessa entity);
		
	    public override Commessa Assemble(Commessa entity, CommessaDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Commessa();
	        }
			
			entity.Id = dto.Id;
			entity.AziendaId = dto.AziendaId;
			entity.Numero = dto.Numero;
			entity.Creazione = dto.Creazione;
			entity.Scadenza = dto.Scadenza;
			entity.Descrizione = dto.Descrizione;
			entity.Denominazione = dto.Denominazione;
			entity.Indirizzo = dto.Indirizzo;
			entity.CAP = dto.CAP;
			entity.Comune = dto.Comune;
			entity.Provincia = dto.Provincia;
			entity.Riferimento = dto.Riferimento;
			entity.Importo = dto.Importo;
			entity.Margine = dto.Margine;
			entity.Stato = dto.Stato;
			entity.Oggetto = dto.Oggetto;
			entity.CodiceCatastale = dto.CodiceCatastale;
			entity.Codice = dto.Codice;
			entity.ImportoAvanzamento = dto.ImportoAvanzamento;
			entity.Percentuale = dto.Percentuale;
			entity.EstremiContratto = dto.EstremiContratto;
			entity.ImportoPerizie = dto.ImportoPerizie;
			entity.InizioLavori = dto.InizioLavori;
			entity.FineLavori = dto.FineLavori;
			entity.Localita = dto.Localita;
			entity.Note = dto.Note;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override CommessaDto Assemble(Commessa entity)
	    {
	        CommessaDto dto = new CommessaDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.AziendaId = entity.AziendaId;
			dto.Numero = entity.Numero;
			dto.Creazione = entity.Creazione;
			dto.Scadenza = entity.Scadenza;
			dto.Descrizione = entity.Descrizione;
			dto.Denominazione = entity.Denominazione;
			dto.Indirizzo = entity.Indirizzo;
			dto.CAP = entity.CAP;
			dto.Comune = entity.Comune;
			dto.Provincia = entity.Provincia;
			dto.Riferimento = entity.Riferimento;
			dto.Importo = entity.Importo;
			dto.Margine = entity.Margine;
			dto.Stato = entity.Stato;
			dto.Oggetto = entity.Oggetto;
			dto.CodiceCatastale = entity.CodiceCatastale;
			dto.Codice = entity.Codice;
			dto.ImportoAvanzamento = entity.ImportoAvanzamento;
			dto.Percentuale = entity.Percentuale;
			dto.EstremiContratto = entity.EstremiContratto;
			dto.ImportoPerizie = entity.ImportoPerizie;
			dto.InizioLavori = entity.InizioLavori;
			dto.FineLavori = entity.FineLavori;
			dto.Localita = entity.Localita;
			dto.Note = entity.Note;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Commessa entity, CommessaDto dto)
	    {
			AziendaAssembler aziendaAssembler = new AziendaAssembler();
			dto.Azienda = aziendaAssembler.Assemble(entity.Azienda);

	    }
	
	    public override void AssembleCollections(Commessa entity, CommessaDto dto)
	    {
			FornitoreAssembler fornitoreAssembler = new FornitoreAssembler();

			dto.Fornitores = new List<FornitoreDto>();
			foreach (Fornitore item in entity.Fornitores)
			{
				var dtoItem = fornitoreAssembler.Assemble(item);
				dtoItem.Commessa = dto;
				dto.Fornitores.Add(dtoItem);
			}

			SALAssembler sALAssembler = new SALAssembler();

			dto.SALs = new List<SALDto>();
			foreach (SAL item in entity.SALs)
			{
				var dtoItem = sALAssembler.Assemble(item);
				dtoItem.Commessa = dto;
				dto.SALs.Add(dtoItem);
			}

			CommittenteAssembler committenteAssembler = new CommittenteAssembler();

			dto.Committentes = new List<CommittenteDto>();
			foreach (Committente item in entity.Committentes)
			{
				var dtoItem = committenteAssembler.Assemble(item);
				dtoItem.Commessa = dto;
				dto.Committentes.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class CommessaAssembler : CommessaAssemblerBase, ICommessaAssembler
	{
	    
	}
	
	public partial interface IFornitoreAssembler : IAssembler<FornitoreDto, Fornitore>
	{ 
	
	}
	
	public partial class FornitoreAssemblerBase : Assembler<FornitoreDto, Fornitore>
	{
		/// <summary>
	    /// Invoked after the FornitoreDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="FornitoreDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(FornitoreDto dto);
	
		/// <summary>
	    /// Invoked after the Fornitore instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Fornitore"/> instance.</param>
		partial void OnEntityAssembled(Fornitore entity);
		
	    public override Fornitore Assemble(Fornitore entity, FornitoreDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Fornitore();
	        }
			
			entity.Id = dto.Id;
			entity.CommessaId = dto.CommessaId;
			entity.RagioneSociale = dto.RagioneSociale;
			entity.Indirizzo = dto.Indirizzo;
			entity.CAP = dto.CAP;
			entity.Comune = dto.Comune;
			entity.Provincia = dto.Provincia;
			entity.Telefono = dto.Telefono;
			entity.Mobile = dto.Mobile;
			entity.Fax = dto.Fax;
			entity.Email = dto.Email;
			entity.PartitaIva = dto.PartitaIva;
			entity.Codice = dto.Codice;
			entity.CodiceCatastale = dto.CodiceCatastale;
			entity.TotaleFattureAcquisto = dto.TotaleFattureAcquisto;
			entity.Stato = dto.Stato;
			entity.TotalePagamenti = dto.TotalePagamenti;
			entity.Localita = dto.Localita;
			entity.Note = dto.Note;
			entity.TotaleNoteCredito = dto.TotaleNoteCredito;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override FornitoreDto Assemble(Fornitore entity)
	    {
	        FornitoreDto dto = new FornitoreDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.CommessaId = entity.CommessaId;
			dto.RagioneSociale = entity.RagioneSociale;
			dto.Indirizzo = entity.Indirizzo;
			dto.CAP = entity.CAP;
			dto.Comune = entity.Comune;
			dto.Provincia = entity.Provincia;
			dto.Telefono = entity.Telefono;
			dto.Mobile = entity.Mobile;
			dto.Fax = entity.Fax;
			dto.Email = entity.Email;
			dto.PartitaIva = entity.PartitaIva;
			dto.Codice = entity.Codice;
			dto.CodiceCatastale = entity.CodiceCatastale;
			dto.TotaleFattureAcquisto = entity.TotaleFattureAcquisto;
			dto.Stato = entity.Stato;
			dto.TotalePagamenti = entity.TotalePagamenti;
			dto.Localita = entity.Localita;
			dto.Note = entity.Note;
			dto.TotaleNoteCredito = entity.TotaleNoteCredito;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Fornitore entity, FornitoreDto dto)
	    {
			CommessaAssembler commessaAssembler = new CommessaAssembler();
			dto.Commessa = commessaAssembler.Assemble(entity.Commessa);

	    }
	
	    public override void AssembleCollections(Fornitore entity, FornitoreDto dto)
	    {
			FatturaAcquistoAssembler fatturaAcquistoAssembler = new FatturaAcquistoAssembler();

			dto.FatturaAcquistos = new List<FatturaAcquistoDto>();
			foreach (FatturaAcquisto item in entity.FatturaAcquistos)
			{
				var dtoItem = fatturaAcquistoAssembler.Assemble(item);
				dtoItem.Fornitore = dto;
				dto.FatturaAcquistos.Add(dtoItem);
			}

			NotaCreditoAssembler notaCreditoAssembler = new NotaCreditoAssembler();

			dto.NotaCreditos = new List<NotaCreditoDto>();
			foreach (NotaCredito item in entity.NotaCreditos)
			{
				var dtoItem = notaCreditoAssembler.Assemble(item);
				dtoItem.Fornitore = dto;
				dto.NotaCreditos.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class FornitoreAssembler : FornitoreAssemblerBase, IFornitoreAssembler
	{
	    
	}
	
	public partial interface ICommittenteAssembler : IAssembler<CommittenteDto, Committente>
	{ 
	
	}
	
	public partial class CommittenteAssemblerBase : Assembler<CommittenteDto, Committente>
	{
		/// <summary>
	    /// Invoked after the CommittenteDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="CommittenteDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(CommittenteDto dto);
	
		/// <summary>
	    /// Invoked after the Committente instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Committente"/> instance.</param>
		partial void OnEntityAssembled(Committente entity);
		
	    public override Committente Assemble(Committente entity, CommittenteDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Committente();
	        }
			
			entity.Id = dto.Id;
			entity.RagioneSociale = dto.RagioneSociale;
			entity.Indirizzo = dto.Indirizzo;
			entity.CAP = dto.CAP;
			entity.Comune = dto.Comune;
			entity.Provincia = dto.Provincia;
			entity.Telefono = dto.Telefono;
			entity.Mobile = dto.Mobile;
			entity.Fax = dto.Fax;
			entity.Email = dto.Email;
			entity.PartitaIva = dto.PartitaIva;
			entity.Codice = dto.Codice;
			entity.CodiceCatastale = dto.CodiceCatastale;
			entity.TotaleFattureVendita = dto.TotaleFattureVendita;
			entity.Stato = dto.Stato;
			entity.TotaleIncassi = dto.TotaleIncassi;
			entity.Localita = dto.Localita;
			entity.Note = dto.Note;
			entity.CommessaId = dto.CommessaId;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override CommittenteDto Assemble(Committente entity)
	    {
	        CommittenteDto dto = new CommittenteDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.RagioneSociale = entity.RagioneSociale;
			dto.Indirizzo = entity.Indirizzo;
			dto.CAP = entity.CAP;
			dto.Comune = entity.Comune;
			dto.Provincia = entity.Provincia;
			dto.Telefono = entity.Telefono;
			dto.Mobile = entity.Mobile;
			dto.Fax = entity.Fax;
			dto.Email = entity.Email;
			dto.PartitaIva = entity.PartitaIva;
			dto.Codice = entity.Codice;
			dto.CodiceCatastale = entity.CodiceCatastale;
			dto.TotaleFattureVendita = entity.TotaleFattureVendita;
			dto.Stato = entity.Stato;
			dto.TotaleIncassi = entity.TotaleIncassi;
			dto.Localita = entity.Localita;
			dto.Note = entity.Note;
			dto.CommessaId = entity.CommessaId;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Committente entity, CommittenteDto dto)
	    {
			CommessaAssembler commessaAssembler = new CommessaAssembler();
			dto.Commessa = commessaAssembler.Assemble(entity.Commessa);

	    }
	
	    public override void AssembleCollections(Committente entity, CommittenteDto dto)
	    {
			FatturaVenditaAssembler fatturaVenditaAssembler = new FatturaVenditaAssembler();

			dto.FatturaVenditas = new List<FatturaVenditaDto>();
			foreach (FatturaVendita item in entity.FatturaVenditas)
			{
				var dtoItem = fatturaVenditaAssembler.Assemble(item);
				dtoItem.Committente = dto;
				dto.FatturaVenditas.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class CommittenteAssembler : CommittenteAssemblerBase, ICommittenteAssembler
	{
	    
	}
	
	public partial interface ICentroCostoAssembler : IAssembler<CentroCostoDto, CentroCosto>
	{ 
	
	}
	
	public partial class CentroCostoAssemblerBase : Assembler<CentroCostoDto, CentroCosto>
	{
		/// <summary>
	    /// Invoked after the CentroCostoDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="CentroCostoDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(CentroCostoDto dto);
	
		/// <summary>
	    /// Invoked after the CentroCosto instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="CentroCosto"/> instance.</param>
		partial void OnEntityAssembled(CentroCosto entity);
		
	    public override CentroCosto Assemble(CentroCosto entity, CentroCostoDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new CentroCosto();
	        }
			
			entity.Id = dto.Id;
			entity.Codice = dto.Codice;
			entity.Denominazione = dto.Denominazione;
			entity.Note = dto.Note;
			entity.AziendaId = dto.AziendaId;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override CentroCostoDto Assemble(CentroCosto entity)
	    {
	        CentroCostoDto dto = new CentroCostoDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.Codice = entity.Codice;
			dto.Denominazione = entity.Denominazione;
			dto.Note = entity.Note;
			dto.AziendaId = entity.AziendaId;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(CentroCosto entity, CentroCostoDto dto)
	    {
			AziendaAssembler aziendaAssembler = new AziendaAssembler();
			dto.Azienda = aziendaAssembler.Assemble(entity.Azienda);

	    }
	
	    public override void AssembleCollections(CentroCosto entity, CentroCostoDto dto)
	    {
			FatturaAcquistoAssembler fatturaAcquistoAssembler = new FatturaAcquistoAssembler();

			dto.FatturaAcquistos = new List<FatturaAcquistoDto>();
			foreach (FatturaAcquisto item in entity.FatturaAcquistos)
			{
				var dtoItem = fatturaAcquistoAssembler.Assemble(item);
				dtoItem.CentroCosto = dto;
				dto.FatturaAcquistos.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class CentroCostoAssembler : CentroCostoAssemblerBase, ICentroCostoAssembler
	{
	    
	}
	
	public partial interface IFatturaAcquistoAssembler : IAssembler<FatturaAcquistoDto, FatturaAcquisto>
	{ 
	
	}
	
	public partial class FatturaAcquistoAssemblerBase : Assembler<FatturaAcquistoDto, FatturaAcquisto>
	{
		/// <summary>
	    /// Invoked after the FatturaAcquistoDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="FatturaAcquistoDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(FatturaAcquistoDto dto);
	
		/// <summary>
	    /// Invoked after the FatturaAcquisto instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="FatturaAcquisto"/> instance.</param>
		partial void OnEntityAssembled(FatturaAcquisto entity);
		
	    public override FatturaAcquisto Assemble(FatturaAcquisto entity, FatturaAcquistoDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new FatturaAcquisto();
	        }
			
			entity.Id = dto.Id;
			entity.FornitoreId = dto.FornitoreId;
			entity.Data = dto.Data;
			entity.Numero = dto.Numero;
			entity.TipoPagamento = dto.TipoPagamento;
			entity.Descrizione = dto.Descrizione;
			entity.Imponibile = dto.Imponibile;
			entity.IVA = dto.IVA;
			entity.Totale = dto.Totale;
			entity.ScadenzaPagamento = dto.ScadenzaPagamento;
			entity.CentroCostoId = dto.CentroCostoId;
			entity.TotalePagamenti = dto.TotalePagamenti;
			entity.Stato = dto.Stato;
			entity.Note = dto.Note;
			entity.TotaleResi = dto.TotaleResi;
			entity.Sconto = dto.Sconto;
			entity.Scadenza = dto.Scadenza;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override FatturaAcquistoDto Assemble(FatturaAcquisto entity)
	    {
	        FatturaAcquistoDto dto = new FatturaAcquistoDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.FornitoreId = entity.FornitoreId;
			dto.Data = entity.Data;
			dto.Numero = entity.Numero;
			dto.TipoPagamento = entity.TipoPagamento;
			dto.Descrizione = entity.Descrizione;
			dto.Imponibile = entity.Imponibile;
			dto.IVA = entity.IVA;
			dto.Totale = entity.Totale;
			dto.ScadenzaPagamento = entity.ScadenzaPagamento;
			dto.CentroCostoId = entity.CentroCostoId;
			dto.TotalePagamenti = entity.TotalePagamenti;
			dto.Stato = entity.Stato;
			dto.Note = entity.Note;
			dto.TotaleResi = entity.TotaleResi;
			dto.Sconto = entity.Sconto;
			dto.Scadenza = entity.Scadenza;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(FatturaAcquisto entity, FatturaAcquistoDto dto)
	    {
			CentroCostoAssembler centroCostoAssembler = new CentroCostoAssembler();
			dto.CentroCosto = centroCostoAssembler.Assemble(entity.CentroCosto);

			FornitoreAssembler fornitoreAssembler = new FornitoreAssembler();
			dto.Fornitore = fornitoreAssembler.Assemble(entity.Fornitore);

	    }
	
	    public override void AssembleCollections(FatturaAcquisto entity, FatturaAcquistoDto dto)
	    {
			ArticoloAssembler articoloAssembler = new ArticoloAssembler();

			dto.Articolos = new List<ArticoloDto>();
			foreach (Articolo item in entity.Articolos)
			{
				var dtoItem = articoloAssembler.Assemble(item);
				dtoItem.FatturaAcquisto = dto;
				dto.Articolos.Add(dtoItem);
			}

			PagamentoAssembler pagamentoAssembler = new PagamentoAssembler();

			dto.Pagamentos = new List<PagamentoDto>();
			foreach (Pagamento item in entity.Pagamentos)
			{
				var dtoItem = pagamentoAssembler.Assemble(item);
				dtoItem.FatturaAcquisto = dto;
				dto.Pagamentos.Add(dtoItem);
			}

			PagamentoUnificatoFatturaAcquistoAssembler pagamentoUnificatoFatturaAcquistoAssembler = new PagamentoUnificatoFatturaAcquistoAssembler();

			dto.PagamentoUnificatoFatturaAcquistos = new List<PagamentoUnificatoFatturaAcquistoDto>();
			foreach (PagamentoUnificatoFatturaAcquisto item in entity.PagamentoUnificatoFatturaAcquistos)
			{
				var dtoItem = pagamentoUnificatoFatturaAcquistoAssembler.Assemble(item);
				dtoItem.FatturaAcquisto = dto;
				dto.PagamentoUnificatoFatturaAcquistos.Add(dtoItem);
			}

			ResoAssembler resoAssembler = new ResoAssembler();

			dto.Resos = new List<ResoDto>();
			foreach (Reso item in entity.Resos)
			{
				var dtoItem = resoAssembler.Assemble(item);
				dtoItem.FatturaAcquisto = dto;
				dto.Resos.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class FatturaAcquistoAssembler : FatturaAcquistoAssemblerBase, IFatturaAcquistoAssembler
	{
	    
	}
	
	public partial interface IArticoloAssembler : IAssembler<ArticoloDto, Articolo>
	{ 
	
	}
	
	public partial class ArticoloAssemblerBase : Assembler<ArticoloDto, Articolo>
	{
		/// <summary>
	    /// Invoked after the ArticoloDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="ArticoloDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(ArticoloDto dto);
	
		/// <summary>
	    /// Invoked after the Articolo instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Articolo"/> instance.</param>
		partial void OnEntityAssembled(Articolo entity);
		
	    public override Articolo Assemble(Articolo entity, ArticoloDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Articolo();
	        }
			
			entity.Id = dto.Id;
			entity.FatturaAcquistoId = dto.FatturaAcquistoId;
			entity.Codice = dto.Codice;
			entity.Descrizione = dto.Descrizione;
			entity.Quantita = dto.Quantita;
			entity.Sconto = dto.Sconto;
			entity.Costo = dto.Costo;
			entity.Importo = dto.Importo;
			entity.IVA = dto.IVA;
			entity.Totale = dto.Totale;
			entity.PrezzoUnitario = dto.PrezzoUnitario;
			entity.Note = dto.Note;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override ArticoloDto Assemble(Articolo entity)
	    {
	        ArticoloDto dto = new ArticoloDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.FatturaAcquistoId = entity.FatturaAcquistoId;
			dto.Codice = entity.Codice;
			dto.Descrizione = entity.Descrizione;
			dto.Quantita = entity.Quantita;
			dto.Sconto = entity.Sconto;
			dto.Costo = entity.Costo;
			dto.Importo = entity.Importo;
			dto.IVA = entity.IVA;
			dto.Totale = entity.Totale;
			dto.PrezzoUnitario = entity.PrezzoUnitario;
			dto.Note = entity.Note;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Articolo entity, ArticoloDto dto)
	    {
			FatturaAcquistoAssembler fatturaAcquistoAssembler = new FatturaAcquistoAssembler();
			dto.FatturaAcquisto = fatturaAcquistoAssembler.Assemble(entity.FatturaAcquisto);

	    }
	
	    public override void AssembleCollections(Articolo entity, ArticoloDto dto)
	    {
	    }
	
	}
	
	
	public partial class ArticoloAssembler : ArticoloAssemblerBase, IArticoloAssembler
	{
	    
	}
	
	public partial interface IPagamentoAssembler : IAssembler<PagamentoDto, Pagamento>
	{ 
	
	}
	
	public partial class PagamentoAssemblerBase : Assembler<PagamentoDto, Pagamento>
	{
		/// <summary>
	    /// Invoked after the PagamentoDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="PagamentoDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(PagamentoDto dto);
	
		/// <summary>
	    /// Invoked after the Pagamento instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Pagamento"/> instance.</param>
		partial void OnEntityAssembled(Pagamento entity);
		
	    public override Pagamento Assemble(Pagamento entity, PagamentoDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Pagamento();
	        }
			
			entity.Id = dto.Id;
			entity.FatturaAcquistoId = dto.FatturaAcquistoId;
			entity.Data = dto.Data;
			entity.Importo = dto.Importo;
			entity.Note = dto.Note;
			entity.Codice = dto.Codice;
			entity.TipoPagamento = dto.TipoPagamento;
			entity.Descrizione = dto.Descrizione;
			entity.PagamentoUnificatoId = dto.PagamentoUnificatoId;
			entity.TransazionePagamento = dto.TransazionePagamento;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override PagamentoDto Assemble(Pagamento entity)
	    {
	        PagamentoDto dto = new PagamentoDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.FatturaAcquistoId = entity.FatturaAcquistoId;
			dto.Data = entity.Data;
			dto.Importo = entity.Importo;
			dto.Note = entity.Note;
			dto.Codice = entity.Codice;
			dto.TipoPagamento = entity.TipoPagamento;
			dto.Descrizione = entity.Descrizione;
			dto.PagamentoUnificatoId = entity.PagamentoUnificatoId;
			dto.TransazionePagamento = entity.TransazionePagamento;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Pagamento entity, PagamentoDto dto)
	    {
			FatturaAcquistoAssembler fatturaAcquistoAssembler = new FatturaAcquistoAssembler();
			dto.FatturaAcquisto = fatturaAcquistoAssembler.Assemble(entity.FatturaAcquisto);

			PagamentoUnificatoAssembler pagamentoUnificatoAssembler = new PagamentoUnificatoAssembler();
			dto.PagamentoUnificato = pagamentoUnificatoAssembler.Assemble(entity.PagamentoUnificato);

	    }
	
	    public override void AssembleCollections(Pagamento entity, PagamentoDto dto)
	    {
	    }
	
	}
	
	
	public partial class PagamentoAssembler : PagamentoAssemblerBase, IPagamentoAssembler
	{
	    
	}
	
	public partial interface IFatturaVenditaAssembler : IAssembler<FatturaVenditaDto, FatturaVendita>
	{ 
	
	}
	
	public partial class FatturaVenditaAssemblerBase : Assembler<FatturaVenditaDto, FatturaVendita>
	{
		/// <summary>
	    /// Invoked after the FatturaVenditaDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="FatturaVenditaDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(FatturaVenditaDto dto);
	
		/// <summary>
	    /// Invoked after the FatturaVendita instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="FatturaVendita"/> instance.</param>
		partial void OnEntityAssembled(FatturaVendita entity);
		
	    public override FatturaVendita Assemble(FatturaVendita entity, FatturaVenditaDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new FatturaVendita();
	        }
			
			entity.Id = dto.Id;
			entity.CommittenteId = dto.CommittenteId;
			entity.Data = dto.Data;
			entity.Numero = dto.Numero;
			entity.TipoPagamento = dto.TipoPagamento;
			entity.Descrizione = dto.Descrizione;
			entity.Imponibile = dto.Imponibile;
			entity.IVA = dto.IVA;
			entity.Totale = dto.Totale;
			entity.ScadenzaPagamento = dto.ScadenzaPagamento;
			entity.Stato = dto.Stato;
			entity.TotaleIncassi = dto.TotaleIncassi;
			entity.Note = dto.Note;
			entity.Scadenza = dto.Scadenza;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override FatturaVenditaDto Assemble(FatturaVendita entity)
	    {
	        FatturaVenditaDto dto = new FatturaVenditaDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.CommittenteId = entity.CommittenteId;
			dto.Data = entity.Data;
			dto.Numero = entity.Numero;
			dto.TipoPagamento = entity.TipoPagamento;
			dto.Descrizione = entity.Descrizione;
			dto.Imponibile = entity.Imponibile;
			dto.IVA = entity.IVA;
			dto.Totale = entity.Totale;
			dto.ScadenzaPagamento = entity.ScadenzaPagamento;
			dto.Stato = entity.Stato;
			dto.TotaleIncassi = entity.TotaleIncassi;
			dto.Note = entity.Note;
			dto.Scadenza = entity.Scadenza;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(FatturaVendita entity, FatturaVenditaDto dto)
	    {
			CommittenteAssembler committenteAssembler = new CommittenteAssembler();
			dto.Committente = committenteAssembler.Assemble(entity.Committente);

	    }
	
	    public override void AssembleCollections(FatturaVendita entity, FatturaVenditaDto dto)
	    {
			IncassoAssembler incassoAssembler = new IncassoAssembler();

			dto.Incassos = new List<IncassoDto>();
			foreach (Incasso item in entity.Incassos)
			{
				var dtoItem = incassoAssembler.Assemble(item);
				dtoItem.FatturaVendita = dto;
				dto.Incassos.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class FatturaVenditaAssembler : FatturaVenditaAssemblerBase, IFatturaVenditaAssembler
	{
	    
	}
	
	public partial interface IIncassoAssembler : IAssembler<IncassoDto, Incasso>
	{ 
	
	}
	
	public partial class IncassoAssemblerBase : Assembler<IncassoDto, Incasso>
	{
		/// <summary>
	    /// Invoked after the IncassoDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="IncassoDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(IncassoDto dto);
	
		/// <summary>
	    /// Invoked after the Incasso instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Incasso"/> instance.</param>
		partial void OnEntityAssembled(Incasso entity);
		
	    public override Incasso Assemble(Incasso entity, IncassoDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Incasso();
	        }
			
			entity.Id = dto.Id;
			entity.FatturaVenditaId = dto.FatturaVenditaId;
			entity.Data = dto.Data;
			entity.Importo = dto.Importo;
			entity.Note = dto.Note;
			entity.Codice = dto.Codice;
			entity.TipoPagamento = dto.TipoPagamento;
			entity.Descrizione = dto.Descrizione;
			entity.TransazionePagamento = dto.TransazionePagamento;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override IncassoDto Assemble(Incasso entity)
	    {
	        IncassoDto dto = new IncassoDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.FatturaVenditaId = entity.FatturaVenditaId;
			dto.Data = entity.Data;
			dto.Importo = entity.Importo;
			dto.Note = entity.Note;
			dto.Codice = entity.Codice;
			dto.TipoPagamento = entity.TipoPagamento;
			dto.Descrizione = entity.Descrizione;
			dto.TransazionePagamento = entity.TransazionePagamento;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Incasso entity, IncassoDto dto)
	    {
			FatturaVenditaAssembler fatturaVenditaAssembler = new FatturaVenditaAssembler();
			dto.FatturaVendita = fatturaVenditaAssembler.Assemble(entity.FatturaVendita);

	    }
	
	    public override void AssembleCollections(Incasso entity, IncassoDto dto)
	    {
	    }
	
	}
	
	
	public partial class IncassoAssembler : IncassoAssemblerBase, IIncassoAssembler
	{
	    
	}
	
	public partial interface IAnagraficaFornitoreAssembler : IAssembler<AnagraficaFornitoreDto, AnagraficaFornitore>
	{ 
	
	}
	
	public partial class AnagraficaFornitoreAssemblerBase : Assembler<AnagraficaFornitoreDto, AnagraficaFornitore>
	{
		/// <summary>
	    /// Invoked after the AnagraficaFornitoreDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="AnagraficaFornitoreDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(AnagraficaFornitoreDto dto);
	
		/// <summary>
	    /// Invoked after the AnagraficaFornitore instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="AnagraficaFornitore"/> instance.</param>
		partial void OnEntityAssembled(AnagraficaFornitore entity);
		
	    public override AnagraficaFornitore Assemble(AnagraficaFornitore entity, AnagraficaFornitoreDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new AnagraficaFornitore();
	        }
			
			entity.Id = dto.Id;
			entity.RagioneSociale = dto.RagioneSociale;
			entity.Indirizzo = dto.Indirizzo;
			entity.CAP = dto.CAP;
			entity.Comune = dto.Comune;
			entity.Provincia = dto.Provincia;
			entity.Telefono = dto.Telefono;
			entity.Mobile = dto.Mobile;
			entity.Fax = dto.Fax;
			entity.Email = dto.Email;
			entity.PartitaIva = dto.PartitaIva;
			entity.Codice = dto.Codice;
			entity.CodiceCatastale = dto.CodiceCatastale;
			entity.Localita = dto.Localita;
			entity.Note = dto.Note;
			entity.AziendaId = dto.AziendaId;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override AnagraficaFornitoreDto Assemble(AnagraficaFornitore entity)
	    {
	        AnagraficaFornitoreDto dto = new AnagraficaFornitoreDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.RagioneSociale = entity.RagioneSociale;
			dto.Indirizzo = entity.Indirizzo;
			dto.CAP = entity.CAP;
			dto.Comune = entity.Comune;
			dto.Provincia = entity.Provincia;
			dto.Telefono = entity.Telefono;
			dto.Mobile = entity.Mobile;
			dto.Fax = entity.Fax;
			dto.Email = entity.Email;
			dto.PartitaIva = entity.PartitaIva;
			dto.Codice = entity.Codice;
			dto.CodiceCatastale = entity.CodiceCatastale;
			dto.Localita = entity.Localita;
			dto.Note = entity.Note;
			dto.AziendaId = entity.AziendaId;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(AnagraficaFornitore entity, AnagraficaFornitoreDto dto)
	    {
			AziendaAssembler aziendaAssembler = new AziendaAssembler();
			dto.Azienda = aziendaAssembler.Assemble(entity.Azienda);

	    }
	
	    public override void AssembleCollections(AnagraficaFornitore entity, AnagraficaFornitoreDto dto)
	    {
	    }
	
	}
	
	
	public partial class AnagraficaFornitoreAssembler : AnagraficaFornitoreAssemblerBase, IAnagraficaFornitoreAssembler
	{
	    
	}
	
	public partial interface IAnagraficaCommittenteAssembler : IAssembler<AnagraficaCommittenteDto, AnagraficaCommittente>
	{ 
	
	}
	
	public partial class AnagraficaCommittenteAssemblerBase : Assembler<AnagraficaCommittenteDto, AnagraficaCommittente>
	{
		/// <summary>
	    /// Invoked after the AnagraficaCommittenteDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="AnagraficaCommittenteDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(AnagraficaCommittenteDto dto);
	
		/// <summary>
	    /// Invoked after the AnagraficaCommittente instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="AnagraficaCommittente"/> instance.</param>
		partial void OnEntityAssembled(AnagraficaCommittente entity);
		
	    public override AnagraficaCommittente Assemble(AnagraficaCommittente entity, AnagraficaCommittenteDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new AnagraficaCommittente();
	        }
			
			entity.Id = dto.Id;
			entity.RagioneSociale = dto.RagioneSociale;
			entity.Indirizzo = dto.Indirizzo;
			entity.CAP = dto.CAP;
			entity.Comune = dto.Comune;
			entity.Provincia = dto.Provincia;
			entity.Telefono = dto.Telefono;
			entity.Mobile = dto.Mobile;
			entity.Fax = dto.Fax;
			entity.Email = dto.Email;
			entity.PartitaIva = dto.PartitaIva;
			entity.Codice = dto.Codice;
			entity.CodiceCatastale = dto.CodiceCatastale;
			entity.Localita = dto.Localita;
			entity.Note = dto.Note;
			entity.AziendaId = dto.AziendaId;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override AnagraficaCommittenteDto Assemble(AnagraficaCommittente entity)
	    {
	        AnagraficaCommittenteDto dto = new AnagraficaCommittenteDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.RagioneSociale = entity.RagioneSociale;
			dto.Indirizzo = entity.Indirizzo;
			dto.CAP = entity.CAP;
			dto.Comune = entity.Comune;
			dto.Provincia = entity.Provincia;
			dto.Telefono = entity.Telefono;
			dto.Mobile = entity.Mobile;
			dto.Fax = entity.Fax;
			dto.Email = entity.Email;
			dto.PartitaIva = entity.PartitaIva;
			dto.Codice = entity.Codice;
			dto.CodiceCatastale = entity.CodiceCatastale;
			dto.Localita = entity.Localita;
			dto.Note = entity.Note;
			dto.AziendaId = entity.AziendaId;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(AnagraficaCommittente entity, AnagraficaCommittenteDto dto)
	    {
			AziendaAssembler aziendaAssembler = new AziendaAssembler();
			dto.Azienda = aziendaAssembler.Assemble(entity.Azienda);

	    }
	
	    public override void AssembleCollections(AnagraficaCommittente entity, AnagraficaCommittenteDto dto)
	    {
	    }
	
	}
	
	
	public partial class AnagraficaCommittenteAssembler : AnagraficaCommittenteAssemblerBase, IAnagraficaCommittenteAssembler
	{
	    
	}
	
	public partial interface ISALAssembler : IAssembler<SALDto, SAL>
	{ 
	
	}
	
	public partial class SALAssemblerBase : Assembler<SALDto, SAL>
	{
		/// <summary>
	    /// Invoked after the SALDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="SALDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(SALDto dto);
	
		/// <summary>
	    /// Invoked after the SAL instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="SAL"/> instance.</param>
		partial void OnEntityAssembled(SAL entity);
		
	    public override SAL Assemble(SAL entity, SALDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new SAL();
	        }
			
			entity.Id = dto.Id;
			entity.CommessaId = dto.CommessaId;
			entity.Data = dto.Data;
			entity.TotaleFattureAcquisto = dto.TotaleFattureAcquisto;
			entity.TotaleFattureVendita = dto.TotaleFattureVendita;
			entity.Denominazione = dto.Denominazione;
			entity.Codice = dto.Codice;
			entity.TotaleIncassi = dto.TotaleIncassi;
			entity.TotalePagamenti = dto.TotalePagamenti;
			entity.Stato = dto.Stato;
			entity.Note = dto.Note;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override SALDto Assemble(SAL entity)
	    {
	        SALDto dto = new SALDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.CommessaId = entity.CommessaId;
			dto.Data = entity.Data;
			dto.TotaleFattureAcquisto = entity.TotaleFattureAcquisto;
			dto.TotaleFattureVendita = entity.TotaleFattureVendita;
			dto.Denominazione = entity.Denominazione;
			dto.Codice = entity.Codice;
			dto.TotaleIncassi = entity.TotaleIncassi;
			dto.TotalePagamenti = entity.TotalePagamenti;
			dto.Stato = entity.Stato;
			dto.Note = entity.Note;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(SAL entity, SALDto dto)
	    {
			CommessaAssembler commessaAssembler = new CommessaAssembler();
			dto.Commessa = commessaAssembler.Assemble(entity.Commessa);

	    }
	
	    public override void AssembleCollections(SAL entity, SALDto dto)
	    {
	    }
	
	}
	
	
	public partial class SALAssembler : SALAssemblerBase, ISALAssembler
	{
	    
	}
	
	public partial interface IAnagraficaArticoloAssembler : IAssembler<AnagraficaArticoloDto, AnagraficaArticolo>
	{ 
	
	}
	
	public partial class AnagraficaArticoloAssemblerBase : Assembler<AnagraficaArticoloDto, AnagraficaArticolo>
	{
		/// <summary>
	    /// Invoked after the AnagraficaArticoloDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="AnagraficaArticoloDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(AnagraficaArticoloDto dto);
	
		/// <summary>
	    /// Invoked after the AnagraficaArticolo instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="AnagraficaArticolo"/> instance.</param>
		partial void OnEntityAssembled(AnagraficaArticolo entity);
		
	    public override AnagraficaArticolo Assemble(AnagraficaArticolo entity, AnagraficaArticoloDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new AnagraficaArticolo();
	        }
			
			entity.Id = dto.Id;
			entity.Codice = dto.Codice;
			entity.Descrizione = dto.Descrizione;
			entity.Note = dto.Note;
			entity.AziendaId = dto.AziendaId;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override AnagraficaArticoloDto Assemble(AnagraficaArticolo entity)
	    {
	        AnagraficaArticoloDto dto = new AnagraficaArticoloDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.Codice = entity.Codice;
			dto.Descrizione = entity.Descrizione;
			dto.Note = entity.Note;
			dto.AziendaId = entity.AziendaId;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(AnagraficaArticolo entity, AnagraficaArticoloDto dto)
	    {
			AziendaAssembler aziendaAssembler = new AziendaAssembler();
			dto.Azienda = aziendaAssembler.Assemble(entity.Azienda);

	    }
	
	    public override void AssembleCollections(AnagraficaArticolo entity, AnagraficaArticoloDto dto)
	    {
	    }
	
	}
	
	
	public partial class AnagraficaArticoloAssembler : AnagraficaArticoloAssemblerBase, IAnagraficaArticoloAssembler
	{
	    
	}
	
	public partial interface IAccountAssembler : IAssembler<AccountDto, Account>
	{ 
	
	}
	
	public partial class AccountAssemblerBase : Assembler<AccountDto, Account>
	{
		/// <summary>
	    /// Invoked after the AccountDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="AccountDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(AccountDto dto);
	
		/// <summary>
	    /// Invoked after the Account instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Account"/> instance.</param>
		partial void OnEntityAssembled(Account entity);
		
	    public override Account Assemble(Account entity, AccountDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Account();
	        }
			
			entity.Id = dto.Id;
			entity.AziendaId = dto.AziendaId;
			entity.Username = dto.Username;
			entity.Password = dto.Password;
			entity.Nickname = dto.Nickname;
			entity.Ruolo = dto.Ruolo;
			entity.Note = dto.Note;
			entity.Creazione = dto.Creazione;
			entity.Abilitato = dto.Abilitato;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override AccountDto Assemble(Account entity)
	    {
	        AccountDto dto = new AccountDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.AziendaId = entity.AziendaId;
			dto.Username = entity.Username;
			dto.Password = entity.Password;
			dto.Nickname = entity.Nickname;
			dto.Ruolo = entity.Ruolo;
			dto.Note = entity.Note;
			dto.Creazione = entity.Creazione;
			dto.Abilitato = entity.Abilitato;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Account entity, AccountDto dto)
	    {
			AziendaAssembler aziendaAssembler = new AziendaAssembler();
			dto.Azienda = aziendaAssembler.Assemble(entity.Azienda);

	    }
	
	    public override void AssembleCollections(Account entity, AccountDto dto)
	    {
	    }
	
	}
	
	
	public partial class AccountAssembler : AccountAssemblerBase, IAccountAssembler
	{
	    
	}
	
	public partial interface IReportJobAssembler : IAssembler<ReportJobDto, ReportJob>
	{ 
	
	}
	
	public partial class ReportJobAssemblerBase : Assembler<ReportJobDto, ReportJob>
	{
		/// <summary>
	    /// Invoked after the ReportJobDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="ReportJobDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(ReportJobDto dto);
	
		/// <summary>
	    /// Invoked after the ReportJob instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="ReportJob"/> instance.</param>
		partial void OnEntityAssembled(ReportJob entity);
		
	    public override ReportJob Assemble(ReportJob entity, ReportJobDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new ReportJob();
	        }
			
			entity.Id = dto.Id;
			entity.Creazione = dto.Creazione;
			entity.Codice = dto.Codice;
			entity.Denominazione = dto.Denominazione;
			entity.Tipo = dto.Tipo;
			entity.CodiceFornitore = dto.CodiceFornitore;
			entity.Elaborazione = dto.Elaborazione;
			entity.Note = dto.Note;
			entity.NomeFile = dto.NomeFile;
			entity.AziendaId = dto.AziendaId;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override ReportJobDto Assemble(ReportJob entity)
	    {
	        ReportJobDto dto = new ReportJobDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.Creazione = entity.Creazione;
			dto.Codice = entity.Codice;
			dto.Denominazione = entity.Denominazione;
			dto.Tipo = entity.Tipo;
			dto.CodiceFornitore = entity.CodiceFornitore;
			dto.Elaborazione = entity.Elaborazione;
			dto.Note = entity.Note;
			dto.NomeFile = entity.NomeFile;
			dto.AziendaId = entity.AziendaId;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(ReportJob entity, ReportJobDto dto)
	    {
			AziendaAssembler aziendaAssembler = new AziendaAssembler();
			dto.Azienda = aziendaAssembler.Assemble(entity.Azienda);

	    }
	
	    public override void AssembleCollections(ReportJob entity, ReportJobDto dto)
	    {
	    }
	
	}
	
	
	public partial class ReportJobAssembler : ReportJobAssemblerBase, IReportJobAssembler
	{
	    
	}
	
	public partial interface IPagamentoUnificatoAssembler : IAssembler<PagamentoUnificatoDto, PagamentoUnificato>
	{ 
	
	}
	
	public partial class PagamentoUnificatoAssemblerBase : Assembler<PagamentoUnificatoDto, PagamentoUnificato>
	{
		/// <summary>
	    /// Invoked after the PagamentoUnificatoDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="PagamentoUnificatoDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(PagamentoUnificatoDto dto);
	
		/// <summary>
	    /// Invoked after the PagamentoUnificato instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="PagamentoUnificato"/> instance.</param>
		partial void OnEntityAssembled(PagamentoUnificato entity);
		
	    public override PagamentoUnificato Assemble(PagamentoUnificato entity, PagamentoUnificatoDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new PagamentoUnificato();
	        }
			
			entity.Id = dto.Id;
			entity.Data = dto.Data;
			entity.Importo = dto.Importo;
			entity.Note = dto.Note;
			entity.Codice = dto.Codice;
			entity.TipoPagamento = dto.TipoPagamento;
			entity.Descrizione = dto.Descrizione;
			entity.CodiceFornitore = dto.CodiceFornitore;
			entity.AziendaId = dto.AziendaId;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override PagamentoUnificatoDto Assemble(PagamentoUnificato entity)
	    {
	        PagamentoUnificatoDto dto = new PagamentoUnificatoDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.Data = entity.Data;
			dto.Importo = entity.Importo;
			dto.Note = entity.Note;
			dto.Codice = entity.Codice;
			dto.TipoPagamento = entity.TipoPagamento;
			dto.Descrizione = entity.Descrizione;
			dto.CodiceFornitore = entity.CodiceFornitore;
			dto.AziendaId = entity.AziendaId;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(PagamentoUnificato entity, PagamentoUnificatoDto dto)
	    {
			AziendaAssembler aziendaAssembler = new AziendaAssembler();
			dto.Azienda = aziendaAssembler.Assemble(entity.Azienda);

	    }
	
	    public override void AssembleCollections(PagamentoUnificato entity, PagamentoUnificatoDto dto)
	    {
			PagamentoAssembler pagamentoAssembler = new PagamentoAssembler();

			dto.Pagamentos = new List<PagamentoDto>();
			foreach (Pagamento item in entity.Pagamentos)
			{
				var dtoItem = pagamentoAssembler.Assemble(item);
				dtoItem.PagamentoUnificato = dto;
				dto.Pagamentos.Add(dtoItem);
			}

			PagamentoUnificatoFatturaAcquistoAssembler pagamentoUnificatoFatturaAcquistoAssembler = new PagamentoUnificatoFatturaAcquistoAssembler();

			dto.PagamentoUnificatoFatturaAcquistos = new List<PagamentoUnificatoFatturaAcquistoDto>();
			foreach (PagamentoUnificatoFatturaAcquisto item in entity.PagamentoUnificatoFatturaAcquistos)
			{
				var dtoItem = pagamentoUnificatoFatturaAcquistoAssembler.Assemble(item);
				dtoItem.PagamentoUnificato = dto;
				dto.PagamentoUnificatoFatturaAcquistos.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class PagamentoUnificatoAssembler : PagamentoUnificatoAssemblerBase, IPagamentoUnificatoAssembler
	{
	    
	}
	
	public partial interface IPagamentoUnificatoFatturaAcquistoAssembler : IAssembler<PagamentoUnificatoFatturaAcquistoDto, PagamentoUnificatoFatturaAcquisto>
	{ 
	
	}
	
	public partial class PagamentoUnificatoFatturaAcquistoAssemblerBase : Assembler<PagamentoUnificatoFatturaAcquistoDto, PagamentoUnificatoFatturaAcquisto>
	{
		/// <summary>
	    /// Invoked after the PagamentoUnificatoFatturaAcquistoDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="PagamentoUnificatoFatturaAcquistoDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(PagamentoUnificatoFatturaAcquistoDto dto);
	
		/// <summary>
	    /// Invoked after the PagamentoUnificatoFatturaAcquisto instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="PagamentoUnificatoFatturaAcquisto"/> instance.</param>
		partial void OnEntityAssembled(PagamentoUnificatoFatturaAcquisto entity);
		
	    public override PagamentoUnificatoFatturaAcquisto Assemble(PagamentoUnificatoFatturaAcquisto entity, PagamentoUnificatoFatturaAcquistoDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new PagamentoUnificatoFatturaAcquisto();
	        }
			
			entity.Id = dto.Id;
			entity.FatturaAcquistoId = dto.FatturaAcquistoId;
			entity.PagamentoUnificatoId = dto.PagamentoUnificatoId;
			entity.Saldo = dto.Saldo;
			entity.Note = dto.Note;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override PagamentoUnificatoFatturaAcquistoDto Assemble(PagamentoUnificatoFatturaAcquisto entity)
	    {
	        PagamentoUnificatoFatturaAcquistoDto dto = new PagamentoUnificatoFatturaAcquistoDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.FatturaAcquistoId = entity.FatturaAcquistoId;
			dto.PagamentoUnificatoId = entity.PagamentoUnificatoId;
			dto.Saldo = entity.Saldo;
			dto.Note = entity.Note;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(PagamentoUnificatoFatturaAcquisto entity, PagamentoUnificatoFatturaAcquistoDto dto)
	    {
			FatturaAcquistoAssembler fatturaAcquistoAssembler = new FatturaAcquistoAssembler();
			dto.FatturaAcquisto = fatturaAcquistoAssembler.Assemble(entity.FatturaAcquisto);

			PagamentoUnificatoAssembler pagamentoUnificatoAssembler = new PagamentoUnificatoAssembler();
			dto.PagamentoUnificato = pagamentoUnificatoAssembler.Assemble(entity.PagamentoUnificato);

	    }
	
	    public override void AssembleCollections(PagamentoUnificatoFatturaAcquisto entity, PagamentoUnificatoFatturaAcquistoDto dto)
	    {
	    }
	
	}
	
	
	public partial class PagamentoUnificatoFatturaAcquistoAssembler : PagamentoUnificatoFatturaAcquistoAssemblerBase, IPagamentoUnificatoFatturaAcquistoAssembler
	{
	    
	}
	
	public partial interface INotaCreditoAssembler : IAssembler<NotaCreditoDto, NotaCredito>
	{ 
	
	}
	
	public partial class NotaCreditoAssemblerBase : Assembler<NotaCreditoDto, NotaCredito>
	{
		/// <summary>
	    /// Invoked after the NotaCreditoDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="NotaCreditoDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(NotaCreditoDto dto);
	
		/// <summary>
	    /// Invoked after the NotaCredito instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="NotaCredito"/> instance.</param>
		partial void OnEntityAssembled(NotaCredito entity);
		
	    public override NotaCredito Assemble(NotaCredito entity, NotaCreditoDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new NotaCredito();
	        }
			
			entity.Id = dto.Id;
			entity.FornitoreId = dto.FornitoreId;
			entity.Data = dto.Data;
			entity.Imponibile = dto.Imponibile;
			entity.Note = dto.Note;
			entity.Descrizione = dto.Descrizione;
			entity.Numero = dto.Numero;
			entity.IVA = dto.IVA;
			entity.Totale = dto.Totale;
			entity.Stato = dto.Stato;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override NotaCreditoDto Assemble(NotaCredito entity)
	    {
	        NotaCreditoDto dto = new NotaCreditoDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.FornitoreId = entity.FornitoreId;
			dto.Data = entity.Data;
			dto.Imponibile = entity.Imponibile;
			dto.Note = entity.Note;
			dto.Descrizione = entity.Descrizione;
			dto.Numero = entity.Numero;
			dto.IVA = entity.IVA;
			dto.Totale = entity.Totale;
			dto.Stato = entity.Stato;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(NotaCredito entity, NotaCreditoDto dto)
	    {
			FornitoreAssembler fornitoreAssembler = new FornitoreAssembler();
			dto.Fornitore = fornitoreAssembler.Assemble(entity.Fornitore);

	    }
	
	    public override void AssembleCollections(NotaCredito entity, NotaCreditoDto dto)
	    {
			ResoAssembler resoAssembler = new ResoAssembler();

			dto.Resos = new List<ResoDto>();
			foreach (Reso item in entity.Resos)
			{
				var dtoItem = resoAssembler.Assemble(item);
				dtoItem.NotaCredito = dto;
				dto.Resos.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class NotaCreditoAssembler : NotaCreditoAssemblerBase, INotaCreditoAssembler
	{
	    
	}
	
	public partial interface IResoAssembler : IAssembler<ResoDto, Reso>
	{ 
	
	}
	
	public partial class ResoAssemblerBase : Assembler<ResoDto, Reso>
	{
		/// <summary>
	    /// Invoked after the ResoDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="ResoDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(ResoDto dto);
	
		/// <summary>
	    /// Invoked after the Reso instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Reso"/> instance.</param>
		partial void OnEntityAssembled(Reso entity);
		
	    public override Reso Assemble(Reso entity, ResoDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Reso();
	        }
			
			entity.Id = dto.Id;
			entity.NotaCreditoId = dto.NotaCreditoId;
			entity.Data = dto.Data;
			entity.Importo = dto.Importo;
			entity.Note = dto.Note;
			entity.Codice = dto.Codice;
			entity.Descrizione = dto.Descrizione;
			entity.FatturaAcquistoId = dto.FatturaAcquistoId;
			entity.IVA = dto.IVA;
			entity.Totale = dto.Totale;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override ResoDto Assemble(Reso entity)
	    {
	        ResoDto dto = new ResoDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.NotaCreditoId = entity.NotaCreditoId;
			dto.Data = entity.Data;
			dto.Importo = entity.Importo;
			dto.Note = entity.Note;
			dto.Codice = entity.Codice;
			dto.Descrizione = entity.Descrizione;
			dto.FatturaAcquistoId = entity.FatturaAcquistoId;
			dto.IVA = entity.IVA;
			dto.Totale = entity.Totale;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Reso entity, ResoDto dto)
	    {
			NotaCreditoAssembler notaCreditoAssembler = new NotaCreditoAssembler();
			dto.NotaCredito = notaCreditoAssembler.Assemble(entity.NotaCredito);

			FatturaAcquistoAssembler fatturaAcquistoAssembler = new FatturaAcquistoAssembler();
			dto.FatturaAcquisto = fatturaAcquistoAssembler.Assemble(entity.FatturaAcquisto);

	    }
	
	    public override void AssembleCollections(Reso entity, ResoDto dto)
	    {
	    }
	
	}
	
	
	public partial class ResoAssembler : ResoAssemblerBase, IResoAssembler
	{
	    
	}
}
#pragma warning restore 1591
