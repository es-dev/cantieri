#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Code is generated byTelerik Data Access Service Wizard
// using PlainIDataService.tt template

namespace WcfService
{
	using System.ServiceModel;
	using WcfService.Dto;
	using System;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.Serialization;

	/// <summary>
	/// EntitiesModelService interface.
	/// </summary>
	[ServiceContract]
	public interface IEntitiesModelService
	{
	    #region Accounts CRUD Operations
	
	    /// <summary>
	    /// Returns all accounts.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AccountDto> ReadAccounts();
	
	    /// <summary>
	    /// Returns a specified amount of accounts from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AccountDto> ReadAccountsPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all accounts filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AccountDto> ReadAccountsFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of accounts from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AccountDto> ReadAccountsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a account with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    AccountDto ReadAccount(string dtoKey);
	
	    /// <summary>
	    /// Returns all accounts count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int AccountsCount();
	
	    /// <summary>
	    /// Returns all accounts count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int AccountsCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new account from the given dto object into the database.
	    /// </summary>
	    /// <param name="account">The dto object.</param>
	    /// <returns>The dto key of the newly created account.</returns>
	    [OperationContract]
	    string CreateAccount(AccountDto account);
	
	    /// <summary>
	    /// Updates account in the database from the given dto object.
	    /// </summary>
	    /// <param name="account">The dto object.</param>
	    [OperationContract]
	    void UpdateAccount(AccountDto account);
	
	    /// <summary>
	    /// Update an existing accounts in the database from the given dto object list.
	    /// </summary>
	    /// <param name="accounts">The dto object list.</param>
	    [OperationContract]
	    void UpdateAccounts(IEnumerable<AccountDto> accounts);
	
	    /// <summary>
	    /// Deletes account from the database by the given dto object.
	    /// </summary>
	    /// <param name="account">The dto object.</param>
	    [OperationContract]
	    void DeleteAccount(AccountDto account);
	
	    /// <summary>
	    /// Delete accounts from the database by the given dto object list.
	    /// </summary>
	    /// <param name="accounts">The dto object list.</param>
	    [OperationContract]
	    void DeleteAccounts(IEnumerable<AccountDto> accounts);
	    
	    #endregion
	    
	    #region AnagraficaArticolos CRUD Operations
	
	    /// <summary>
	    /// Returns all anagraficaarticolos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AnagraficaArticoloDto> ReadAnagraficaArticolos();
	
	    /// <summary>
	    /// Returns a specified amount of anagraficaarticolos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AnagraficaArticoloDto> ReadAnagraficaArticolosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all anagraficaarticolos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AnagraficaArticoloDto> ReadAnagraficaArticolosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of anagraficaarticolos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AnagraficaArticoloDto> ReadAnagraficaArticolosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a anagraficaarticolo with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    AnagraficaArticoloDto ReadAnagraficaArticolo(string dtoKey);
	
	    /// <summary>
	    /// Returns all anagraficaarticolos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int AnagraficaArticolosCount();
	
	    /// <summary>
	    /// Returns all anagraficaarticolos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int AnagraficaArticolosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new anagraficaarticolo from the given dto object into the database.
	    /// </summary>
	    /// <param name="anagraficaarticolo">The dto object.</param>
	    /// <returns>The dto key of the newly created anagraficaarticolo.</returns>
	    [OperationContract]
	    string CreateAnagraficaArticolo(AnagraficaArticoloDto anagraficaarticolo);
	
	    /// <summary>
	    /// Updates anagraficaarticolo in the database from the given dto object.
	    /// </summary>
	    /// <param name="anagraficaarticolo">The dto object.</param>
	    [OperationContract]
	    void UpdateAnagraficaArticolo(AnagraficaArticoloDto anagraficaarticolo);
	
	    /// <summary>
	    /// Update an existing anagraficaarticolos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="anagraficaarticolos">The dto object list.</param>
	    [OperationContract]
	    void UpdateAnagraficaArticolos(IEnumerable<AnagraficaArticoloDto> anagraficaarticolos);
	
	    /// <summary>
	    /// Deletes anagraficaarticolo from the database by the given dto object.
	    /// </summary>
	    /// <param name="anagraficaarticolo">The dto object.</param>
	    [OperationContract]
	    void DeleteAnagraficaArticolo(AnagraficaArticoloDto anagraficaarticolo);
	
	    /// <summary>
	    /// Delete anagraficaarticolos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="anagraficaarticolos">The dto object list.</param>
	    [OperationContract]
	    void DeleteAnagraficaArticolos(IEnumerable<AnagraficaArticoloDto> anagraficaarticolos);
	    
	    #endregion
	    
	    #region AnagraficaCommittentes CRUD Operations
	
	    /// <summary>
	    /// Returns all anagraficacommittentes.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AnagraficaCommittenteDto> ReadAnagraficaCommittentes();
	
	    /// <summary>
	    /// Returns a specified amount of anagraficacommittentes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AnagraficaCommittenteDto> ReadAnagraficaCommittentesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all anagraficacommittentes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AnagraficaCommittenteDto> ReadAnagraficaCommittentesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of anagraficacommittentes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AnagraficaCommittenteDto> ReadAnagraficaCommittentesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a anagraficacommittente with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    AnagraficaCommittenteDto ReadAnagraficaCommittente(string dtoKey);
	
	    /// <summary>
	    /// Returns all anagraficacommittentes count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int AnagraficaCommittentesCount();
	
	    /// <summary>
	    /// Returns all anagraficacommittentes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int AnagraficaCommittentesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new anagraficacommittente from the given dto object into the database.
	    /// </summary>
	    /// <param name="anagraficacommittente">The dto object.</param>
	    /// <returns>The dto key of the newly created anagraficacommittente.</returns>
	    [OperationContract]
	    string CreateAnagraficaCommittente(AnagraficaCommittenteDto anagraficacommittente);
	
	    /// <summary>
	    /// Updates anagraficacommittente in the database from the given dto object.
	    /// </summary>
	    /// <param name="anagraficacommittente">The dto object.</param>
	    [OperationContract]
	    void UpdateAnagraficaCommittente(AnagraficaCommittenteDto anagraficacommittente);
	
	    /// <summary>
	    /// Update an existing anagraficacommittentes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="anagraficacommittentes">The dto object list.</param>
	    [OperationContract]
	    void UpdateAnagraficaCommittentes(IEnumerable<AnagraficaCommittenteDto> anagraficacommittentes);
	
	    /// <summary>
	    /// Deletes anagraficacommittente from the database by the given dto object.
	    /// </summary>
	    /// <param name="anagraficacommittente">The dto object.</param>
	    [OperationContract]
	    void DeleteAnagraficaCommittente(AnagraficaCommittenteDto anagraficacommittente);
	
	    /// <summary>
	    /// Delete anagraficacommittentes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="anagraficacommittentes">The dto object list.</param>
	    [OperationContract]
	    void DeleteAnagraficaCommittentes(IEnumerable<AnagraficaCommittenteDto> anagraficacommittentes);
	    
	    #endregion
	    
	    #region AnagraficaFornitores CRUD Operations
	
	    /// <summary>
	    /// Returns all anagraficafornitores.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AnagraficaFornitoreDto> ReadAnagraficaFornitores();
	
	    /// <summary>
	    /// Returns a specified amount of anagraficafornitores from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AnagraficaFornitoreDto> ReadAnagraficaFornitoresPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all anagraficafornitores filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AnagraficaFornitoreDto> ReadAnagraficaFornitoresFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of anagraficafornitores from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AnagraficaFornitoreDto> ReadAnagraficaFornitoresPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a anagraficafornitore with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    AnagraficaFornitoreDto ReadAnagraficaFornitore(string dtoKey);
	
	    /// <summary>
	    /// Returns all anagraficafornitores count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int AnagraficaFornitoresCount();
	
	    /// <summary>
	    /// Returns all anagraficafornitores count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int AnagraficaFornitoresCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new anagraficafornitore from the given dto object into the database.
	    /// </summary>
	    /// <param name="anagraficafornitore">The dto object.</param>
	    /// <returns>The dto key of the newly created anagraficafornitore.</returns>
	    [OperationContract]
	    string CreateAnagraficaFornitore(AnagraficaFornitoreDto anagraficafornitore);
	
	    /// <summary>
	    /// Updates anagraficafornitore in the database from the given dto object.
	    /// </summary>
	    /// <param name="anagraficafornitore">The dto object.</param>
	    [OperationContract]
	    void UpdateAnagraficaFornitore(AnagraficaFornitoreDto anagraficafornitore);
	
	    /// <summary>
	    /// Update an existing anagraficafornitores in the database from the given dto object list.
	    /// </summary>
	    /// <param name="anagraficafornitores">The dto object list.</param>
	    [OperationContract]
	    void UpdateAnagraficaFornitores(IEnumerable<AnagraficaFornitoreDto> anagraficafornitores);
	
	    /// <summary>
	    /// Deletes anagraficafornitore from the database by the given dto object.
	    /// </summary>
	    /// <param name="anagraficafornitore">The dto object.</param>
	    [OperationContract]
	    void DeleteAnagraficaFornitore(AnagraficaFornitoreDto anagraficafornitore);
	
	    /// <summary>
	    /// Delete anagraficafornitores from the database by the given dto object list.
	    /// </summary>
	    /// <param name="anagraficafornitores">The dto object list.</param>
	    [OperationContract]
	    void DeleteAnagraficaFornitores(IEnumerable<AnagraficaFornitoreDto> anagraficafornitores);
	    
	    #endregion
	    
	    #region Articolos CRUD Operations
	
	    /// <summary>
	    /// Returns all articolos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ArticoloDto> ReadArticolos();
	
	    /// <summary>
	    /// Returns a specified amount of articolos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ArticoloDto> ReadArticolosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all articolos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ArticoloDto> ReadArticolosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of articolos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ArticoloDto> ReadArticolosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a articolo with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ArticoloDto ReadArticolo(string dtoKey);
	
	    /// <summary>
	    /// Returns all articolos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ArticolosCount();
	
	    /// <summary>
	    /// Returns all articolos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ArticolosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new articolo from the given dto object into the database.
	    /// </summary>
	    /// <param name="articolo">The dto object.</param>
	    /// <returns>The dto key of the newly created articolo.</returns>
	    [OperationContract]
	    string CreateArticolo(ArticoloDto articolo);
	
	    /// <summary>
	    /// Updates articolo in the database from the given dto object.
	    /// </summary>
	    /// <param name="articolo">The dto object.</param>
	    [OperationContract]
	    void UpdateArticolo(ArticoloDto articolo);
	
	    /// <summary>
	    /// Update an existing articolos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="articolos">The dto object list.</param>
	    [OperationContract]
	    void UpdateArticolos(IEnumerable<ArticoloDto> articolos);
	
	    /// <summary>
	    /// Deletes articolo from the database by the given dto object.
	    /// </summary>
	    /// <param name="articolo">The dto object.</param>
	    [OperationContract]
	    void DeleteArticolo(ArticoloDto articolo);
	
	    /// <summary>
	    /// Delete articolos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="articolos">The dto object list.</param>
	    [OperationContract]
	    void DeleteArticolos(IEnumerable<ArticoloDto> articolos);
	    
	    #endregion
	    
	    #region Aziendas CRUD Operations
	
	    /// <summary>
	    /// Returns all aziendas.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AziendaDto> ReadAziendas();
	
	    /// <summary>
	    /// Returns a specified amount of aziendas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AziendaDto> ReadAziendasPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all aziendas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AziendaDto> ReadAziendasFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of aziendas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AziendaDto> ReadAziendasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a azienda with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    AziendaDto ReadAzienda(string dtoKey);
	
	    /// <summary>
	    /// Returns all aziendas count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int AziendasCount();
	
	    /// <summary>
	    /// Returns all aziendas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int AziendasCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new azienda from the given dto object into the database.
	    /// </summary>
	    /// <param name="azienda">The dto object.</param>
	    /// <returns>The dto key of the newly created azienda.</returns>
	    [OperationContract]
	    string CreateAzienda(AziendaDto azienda);
	
	    /// <summary>
	    /// Updates azienda in the database from the given dto object.
	    /// </summary>
	    /// <param name="azienda">The dto object.</param>
	    [OperationContract]
	    void UpdateAzienda(AziendaDto azienda);
	
	    /// <summary>
	    /// Update an existing aziendas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="aziendas">The dto object list.</param>
	    [OperationContract]
	    void UpdateAziendas(IEnumerable<AziendaDto> aziendas);
	
	    /// <summary>
	    /// Deletes azienda from the database by the given dto object.
	    /// </summary>
	    /// <param name="azienda">The dto object.</param>
	    [OperationContract]
	    void DeleteAzienda(AziendaDto azienda);
	
	    /// <summary>
	    /// Delete aziendas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="aziendas">The dto object list.</param>
	    [OperationContract]
	    void DeleteAziendas(IEnumerable<AziendaDto> aziendas);
	    
	    #endregion
	    
	    #region CentroCostos CRUD Operations
	
	    /// <summary>
	    /// Returns all centrocostos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CentroCostoDto> ReadCentroCostos();
	
	    /// <summary>
	    /// Returns a specified amount of centrocostos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CentroCostoDto> ReadCentroCostosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all centrocostos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CentroCostoDto> ReadCentroCostosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of centrocostos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CentroCostoDto> ReadCentroCostosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a centrocosto with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CentroCostoDto ReadCentroCosto(string dtoKey);
	
	    /// <summary>
	    /// Returns all centrocostos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CentroCostosCount();
	
	    /// <summary>
	    /// Returns all centrocostos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CentroCostosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new centrocosto from the given dto object into the database.
	    /// </summary>
	    /// <param name="centrocosto">The dto object.</param>
	    /// <returns>The dto key of the newly created centrocosto.</returns>
	    [OperationContract]
	    string CreateCentroCosto(CentroCostoDto centrocosto);
	
	    /// <summary>
	    /// Updates centrocosto in the database from the given dto object.
	    /// </summary>
	    /// <param name="centrocosto">The dto object.</param>
	    [OperationContract]
	    void UpdateCentroCosto(CentroCostoDto centrocosto);
	
	    /// <summary>
	    /// Update an existing centrocostos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="centrocostos">The dto object list.</param>
	    [OperationContract]
	    void UpdateCentroCostos(IEnumerable<CentroCostoDto> centrocostos);
	
	    /// <summary>
	    /// Deletes centrocosto from the database by the given dto object.
	    /// </summary>
	    /// <param name="centrocosto">The dto object.</param>
	    [OperationContract]
	    void DeleteCentroCosto(CentroCostoDto centrocosto);
	
	    /// <summary>
	    /// Delete centrocostos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="centrocostos">The dto object list.</param>
	    [OperationContract]
	    void DeleteCentroCostos(IEnumerable<CentroCostoDto> centrocostos);
	    
	    #endregion
	    
	    #region Commessas CRUD Operations
	
	    /// <summary>
	    /// Returns all commessas.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CommessaDto> ReadCommessas();
	
	    /// <summary>
	    /// Returns a specified amount of commessas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CommessaDto> ReadCommessasPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all commessas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CommessaDto> ReadCommessasFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of commessas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CommessaDto> ReadCommessasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a commessa with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CommessaDto ReadCommessa(string dtoKey);
	
	    /// <summary>
	    /// Returns all commessas count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CommessasCount();
	
	    /// <summary>
	    /// Returns all commessas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CommessasCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new commessa from the given dto object into the database.
	    /// </summary>
	    /// <param name="commessa">The dto object.</param>
	    /// <returns>The dto key of the newly created commessa.</returns>
	    [OperationContract]
	    string CreateCommessa(CommessaDto commessa);
	
	    /// <summary>
	    /// Updates commessa in the database from the given dto object.
	    /// </summary>
	    /// <param name="commessa">The dto object.</param>
	    [OperationContract]
	    void UpdateCommessa(CommessaDto commessa);
	
	    /// <summary>
	    /// Update an existing commessas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="commessas">The dto object list.</param>
	    [OperationContract]
	    void UpdateCommessas(IEnumerable<CommessaDto> commessas);
	
	    /// <summary>
	    /// Deletes commessa from the database by the given dto object.
	    /// </summary>
	    /// <param name="commessa">The dto object.</param>
	    [OperationContract]
	    void DeleteCommessa(CommessaDto commessa);
	
	    /// <summary>
	    /// Delete commessas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="commessas">The dto object list.</param>
	    [OperationContract]
	    void DeleteCommessas(IEnumerable<CommessaDto> commessas);
	    
	    #endregion
	    
	    #region Committentes CRUD Operations
	
	    /// <summary>
	    /// Returns all committentes.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CommittenteDto> ReadCommittentes();
	
	    /// <summary>
	    /// Returns a specified amount of committentes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CommittenteDto> ReadCommittentesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all committentes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CommittenteDto> ReadCommittentesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of committentes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CommittenteDto> ReadCommittentesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a committente with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CommittenteDto ReadCommittente(string dtoKey);
	
	    /// <summary>
	    /// Returns all committentes count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CommittentesCount();
	
	    /// <summary>
	    /// Returns all committentes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CommittentesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new committente from the given dto object into the database.
	    /// </summary>
	    /// <param name="committente">The dto object.</param>
	    /// <returns>The dto key of the newly created committente.</returns>
	    [OperationContract]
	    string CreateCommittente(CommittenteDto committente);
	
	    /// <summary>
	    /// Updates committente in the database from the given dto object.
	    /// </summary>
	    /// <param name="committente">The dto object.</param>
	    [OperationContract]
	    void UpdateCommittente(CommittenteDto committente);
	
	    /// <summary>
	    /// Update an existing committentes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="committentes">The dto object list.</param>
	    [OperationContract]
	    void UpdateCommittentes(IEnumerable<CommittenteDto> committentes);
	
	    /// <summary>
	    /// Deletes committente from the database by the given dto object.
	    /// </summary>
	    /// <param name="committente">The dto object.</param>
	    [OperationContract]
	    void DeleteCommittente(CommittenteDto committente);
	
	    /// <summary>
	    /// Delete committentes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="committentes">The dto object list.</param>
	    [OperationContract]
	    void DeleteCommittentes(IEnumerable<CommittenteDto> committentes);
	    
	    #endregion
	    
	    #region FatturaAcquistos CRUD Operations
	
	    /// <summary>
	    /// Returns all fatturaacquistos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<FatturaAcquistoDto> ReadFatturaAcquistos();
	
	    /// <summary>
	    /// Returns a specified amount of fatturaacquistos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<FatturaAcquistoDto> ReadFatturaAcquistosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all fatturaacquistos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<FatturaAcquistoDto> ReadFatturaAcquistosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of fatturaacquistos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<FatturaAcquistoDto> ReadFatturaAcquistosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a fatturaacquisto with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    FatturaAcquistoDto ReadFatturaAcquisto(string dtoKey);
	
	    /// <summary>
	    /// Returns all fatturaacquistos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int FatturaAcquistosCount();
	
	    /// <summary>
	    /// Returns all fatturaacquistos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int FatturaAcquistosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new fatturaacquisto from the given dto object into the database.
	    /// </summary>
	    /// <param name="fatturaacquisto">The dto object.</param>
	    /// <returns>The dto key of the newly created fatturaacquisto.</returns>
	    [OperationContract]
	    string CreateFatturaAcquisto(FatturaAcquistoDto fatturaacquisto);
	
	    /// <summary>
	    /// Updates fatturaacquisto in the database from the given dto object.
	    /// </summary>
	    /// <param name="fatturaacquisto">The dto object.</param>
	    [OperationContract]
	    void UpdateFatturaAcquisto(FatturaAcquistoDto fatturaacquisto);
	
	    /// <summary>
	    /// Update an existing fatturaacquistos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="fatturaacquistos">The dto object list.</param>
	    [OperationContract]
	    void UpdateFatturaAcquistos(IEnumerable<FatturaAcquistoDto> fatturaacquistos);
	
	    /// <summary>
	    /// Deletes fatturaacquisto from the database by the given dto object.
	    /// </summary>
	    /// <param name="fatturaacquisto">The dto object.</param>
	    [OperationContract]
	    void DeleteFatturaAcquisto(FatturaAcquistoDto fatturaacquisto);
	
	    /// <summary>
	    /// Delete fatturaacquistos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="fatturaacquistos">The dto object list.</param>
	    [OperationContract]
	    void DeleteFatturaAcquistos(IEnumerable<FatturaAcquistoDto> fatturaacquistos);
	    
	    #endregion
	    
	    #region FatturaVenditas CRUD Operations
	
	    /// <summary>
	    /// Returns all fatturavenditas.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<FatturaVenditaDto> ReadFatturaVenditas();
	
	    /// <summary>
	    /// Returns a specified amount of fatturavenditas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<FatturaVenditaDto> ReadFatturaVenditasPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all fatturavenditas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<FatturaVenditaDto> ReadFatturaVenditasFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of fatturavenditas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<FatturaVenditaDto> ReadFatturaVenditasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a fatturavendita with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    FatturaVenditaDto ReadFatturaVendita(string dtoKey);
	
	    /// <summary>
	    /// Returns all fatturavenditas count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int FatturaVenditasCount();
	
	    /// <summary>
	    /// Returns all fatturavenditas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int FatturaVenditasCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new fatturavendita from the given dto object into the database.
	    /// </summary>
	    /// <param name="fatturavendita">The dto object.</param>
	    /// <returns>The dto key of the newly created fatturavendita.</returns>
	    [OperationContract]
	    string CreateFatturaVendita(FatturaVenditaDto fatturavendita);
	
	    /// <summary>
	    /// Updates fatturavendita in the database from the given dto object.
	    /// </summary>
	    /// <param name="fatturavendita">The dto object.</param>
	    [OperationContract]
	    void UpdateFatturaVendita(FatturaVenditaDto fatturavendita);
	
	    /// <summary>
	    /// Update an existing fatturavenditas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="fatturavenditas">The dto object list.</param>
	    [OperationContract]
	    void UpdateFatturaVenditas(IEnumerable<FatturaVenditaDto> fatturavenditas);
	
	    /// <summary>
	    /// Deletes fatturavendita from the database by the given dto object.
	    /// </summary>
	    /// <param name="fatturavendita">The dto object.</param>
	    [OperationContract]
	    void DeleteFatturaVendita(FatturaVenditaDto fatturavendita);
	
	    /// <summary>
	    /// Delete fatturavenditas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="fatturavenditas">The dto object list.</param>
	    [OperationContract]
	    void DeleteFatturaVenditas(IEnumerable<FatturaVenditaDto> fatturavenditas);
	    
	    #endregion
	    
	    #region Fornitores CRUD Operations
	
	    /// <summary>
	    /// Returns all fornitores.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<FornitoreDto> ReadFornitores();
	
	    /// <summary>
	    /// Returns a specified amount of fornitores from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<FornitoreDto> ReadFornitoresPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all fornitores filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<FornitoreDto> ReadFornitoresFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of fornitores from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<FornitoreDto> ReadFornitoresPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a fornitore with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    FornitoreDto ReadFornitore(string dtoKey);
	
	    /// <summary>
	    /// Returns all fornitores count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int FornitoresCount();
	
	    /// <summary>
	    /// Returns all fornitores count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int FornitoresCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new fornitore from the given dto object into the database.
	    /// </summary>
	    /// <param name="fornitore">The dto object.</param>
	    /// <returns>The dto key of the newly created fornitore.</returns>
	    [OperationContract]
	    string CreateFornitore(FornitoreDto fornitore);
	
	    /// <summary>
	    /// Updates fornitore in the database from the given dto object.
	    /// </summary>
	    /// <param name="fornitore">The dto object.</param>
	    [OperationContract]
	    void UpdateFornitore(FornitoreDto fornitore);
	
	    /// <summary>
	    /// Update an existing fornitores in the database from the given dto object list.
	    /// </summary>
	    /// <param name="fornitores">The dto object list.</param>
	    [OperationContract]
	    void UpdateFornitores(IEnumerable<FornitoreDto> fornitores);
	
	    /// <summary>
	    /// Deletes fornitore from the database by the given dto object.
	    /// </summary>
	    /// <param name="fornitore">The dto object.</param>
	    [OperationContract]
	    void DeleteFornitore(FornitoreDto fornitore);
	
	    /// <summary>
	    /// Delete fornitores from the database by the given dto object list.
	    /// </summary>
	    /// <param name="fornitores">The dto object list.</param>
	    [OperationContract]
	    void DeleteFornitores(IEnumerable<FornitoreDto> fornitores);
	    
	    #endregion
	    
	    #region Incassos CRUD Operations
	
	    /// <summary>
	    /// Returns all incassos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<IncassoDto> ReadIncassos();
	
	    /// <summary>
	    /// Returns a specified amount of incassos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<IncassoDto> ReadIncassosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all incassos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<IncassoDto> ReadIncassosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of incassos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<IncassoDto> ReadIncassosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a incasso with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IncassoDto ReadIncasso(string dtoKey);
	
	    /// <summary>
	    /// Returns all incassos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int IncassosCount();
	
	    /// <summary>
	    /// Returns all incassos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int IncassosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new incasso from the given dto object into the database.
	    /// </summary>
	    /// <param name="incasso">The dto object.</param>
	    /// <returns>The dto key of the newly created incasso.</returns>
	    [OperationContract]
	    string CreateIncasso(IncassoDto incasso);
	
	    /// <summary>
	    /// Updates incasso in the database from the given dto object.
	    /// </summary>
	    /// <param name="incasso">The dto object.</param>
	    [OperationContract]
	    void UpdateIncasso(IncassoDto incasso);
	
	    /// <summary>
	    /// Update an existing incassos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="incassos">The dto object list.</param>
	    [OperationContract]
	    void UpdateIncassos(IEnumerable<IncassoDto> incassos);
	
	    /// <summary>
	    /// Deletes incasso from the database by the given dto object.
	    /// </summary>
	    /// <param name="incasso">The dto object.</param>
	    [OperationContract]
	    void DeleteIncasso(IncassoDto incasso);
	
	    /// <summary>
	    /// Delete incassos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="incassos">The dto object list.</param>
	    [OperationContract]
	    void DeleteIncassos(IEnumerable<IncassoDto> incassos);
	    
	    #endregion
	    
	    #region NotaCreditos CRUD Operations
	
	    /// <summary>
	    /// Returns all notacreditos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<NotaCreditoDto> ReadNotaCreditos();
	
	    /// <summary>
	    /// Returns a specified amount of notacreditos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<NotaCreditoDto> ReadNotaCreditosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all notacreditos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<NotaCreditoDto> ReadNotaCreditosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of notacreditos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<NotaCreditoDto> ReadNotaCreditosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a notacredito with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    NotaCreditoDto ReadNotaCredito(string dtoKey);
	
	    /// <summary>
	    /// Returns all notacreditos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int NotaCreditosCount();
	
	    /// <summary>
	    /// Returns all notacreditos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int NotaCreditosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new notacredito from the given dto object into the database.
	    /// </summary>
	    /// <param name="notacredito">The dto object.</param>
	    /// <returns>The dto key of the newly created notacredito.</returns>
	    [OperationContract]
	    string CreateNotaCredito(NotaCreditoDto notacredito);
	
	    /// <summary>
	    /// Updates notacredito in the database from the given dto object.
	    /// </summary>
	    /// <param name="notacredito">The dto object.</param>
	    [OperationContract]
	    void UpdateNotaCredito(NotaCreditoDto notacredito);
	
	    /// <summary>
	    /// Update an existing notacreditos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="notacreditos">The dto object list.</param>
	    [OperationContract]
	    void UpdateNotaCreditos(IEnumerable<NotaCreditoDto> notacreditos);
	
	    /// <summary>
	    /// Deletes notacredito from the database by the given dto object.
	    /// </summary>
	    /// <param name="notacredito">The dto object.</param>
	    [OperationContract]
	    void DeleteNotaCredito(NotaCreditoDto notacredito);
	
	    /// <summary>
	    /// Delete notacreditos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="notacreditos">The dto object list.</param>
	    [OperationContract]
	    void DeleteNotaCreditos(IEnumerable<NotaCreditoDto> notacreditos);
	    
	    #endregion
	    
	    #region Pagamentos CRUD Operations
	
	    /// <summary>
	    /// Returns all pagamentos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PagamentoDto> ReadPagamentos();
	
	    /// <summary>
	    /// Returns a specified amount of pagamentos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PagamentoDto> ReadPagamentosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all pagamentos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PagamentoDto> ReadPagamentosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of pagamentos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PagamentoDto> ReadPagamentosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a pagamento with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    PagamentoDto ReadPagamento(string dtoKey);
	
	    /// <summary>
	    /// Returns all pagamentos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int PagamentosCount();
	
	    /// <summary>
	    /// Returns all pagamentos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int PagamentosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new pagamento from the given dto object into the database.
	    /// </summary>
	    /// <param name="pagamento">The dto object.</param>
	    /// <returns>The dto key of the newly created pagamento.</returns>
	    [OperationContract]
	    string CreatePagamento(PagamentoDto pagamento);
	
	    /// <summary>
	    /// Updates pagamento in the database from the given dto object.
	    /// </summary>
	    /// <param name="pagamento">The dto object.</param>
	    [OperationContract]
	    void UpdatePagamento(PagamentoDto pagamento);
	
	    /// <summary>
	    /// Update an existing pagamentos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="pagamentos">The dto object list.</param>
	    [OperationContract]
	    void UpdatePagamentos(IEnumerable<PagamentoDto> pagamentos);
	
	    /// <summary>
	    /// Deletes pagamento from the database by the given dto object.
	    /// </summary>
	    /// <param name="pagamento">The dto object.</param>
	    [OperationContract]
	    void DeletePagamento(PagamentoDto pagamento);
	
	    /// <summary>
	    /// Delete pagamentos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="pagamentos">The dto object list.</param>
	    [OperationContract]
	    void DeletePagamentos(IEnumerable<PagamentoDto> pagamentos);
	    
	    #endregion
	    
	    #region PagamentoUnificatos CRUD Operations
	
	    /// <summary>
	    /// Returns all pagamentounificatos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PagamentoUnificatoDto> ReadPagamentoUnificatos();
	
	    /// <summary>
	    /// Returns a specified amount of pagamentounificatos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PagamentoUnificatoDto> ReadPagamentoUnificatosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all pagamentounificatos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PagamentoUnificatoDto> ReadPagamentoUnificatosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of pagamentounificatos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PagamentoUnificatoDto> ReadPagamentoUnificatosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a pagamentounificato with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    PagamentoUnificatoDto ReadPagamentoUnificato(string dtoKey);
	
	    /// <summary>
	    /// Returns all pagamentounificatos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int PagamentoUnificatosCount();
	
	    /// <summary>
	    /// Returns all pagamentounificatos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int PagamentoUnificatosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new pagamentounificato from the given dto object into the database.
	    /// </summary>
	    /// <param name="pagamentounificato">The dto object.</param>
	    /// <returns>The dto key of the newly created pagamentounificato.</returns>
	    [OperationContract]
	    string CreatePagamentoUnificato(PagamentoUnificatoDto pagamentounificato);
	
	    /// <summary>
	    /// Updates pagamentounificato in the database from the given dto object.
	    /// </summary>
	    /// <param name="pagamentounificato">The dto object.</param>
	    [OperationContract]
	    void UpdatePagamentoUnificato(PagamentoUnificatoDto pagamentounificato);
	
	    /// <summary>
	    /// Update an existing pagamentounificatos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="pagamentounificatos">The dto object list.</param>
	    [OperationContract]
	    void UpdatePagamentoUnificatos(IEnumerable<PagamentoUnificatoDto> pagamentounificatos);
	
	    /// <summary>
	    /// Deletes pagamentounificato from the database by the given dto object.
	    /// </summary>
	    /// <param name="pagamentounificato">The dto object.</param>
	    [OperationContract]
	    void DeletePagamentoUnificato(PagamentoUnificatoDto pagamentounificato);
	
	    /// <summary>
	    /// Delete pagamentounificatos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="pagamentounificatos">The dto object list.</param>
	    [OperationContract]
	    void DeletePagamentoUnificatos(IEnumerable<PagamentoUnificatoDto> pagamentounificatos);
	    
	    #endregion
	    
	    #region PagamentoUnificatoFatturaAcquistos CRUD Operations
	
	    /// <summary>
	    /// Returns all pagamentounificatofatturaacquistos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PagamentoUnificatoFatturaAcquistoDto> ReadPagamentoUnificatoFatturaAcquistos();
	
	    /// <summary>
	    /// Returns a specified amount of pagamentounificatofatturaacquistos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PagamentoUnificatoFatturaAcquistoDto> ReadPagamentoUnificatoFatturaAcquistosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all pagamentounificatofatturaacquistos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PagamentoUnificatoFatturaAcquistoDto> ReadPagamentoUnificatoFatturaAcquistosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of pagamentounificatofatturaacquistos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PagamentoUnificatoFatturaAcquistoDto> ReadPagamentoUnificatoFatturaAcquistosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a pagamentounificatofatturaacquisto with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    PagamentoUnificatoFatturaAcquistoDto ReadPagamentoUnificatoFatturaAcquisto(string dtoKey);
	
	    /// <summary>
	    /// Returns all pagamentounificatofatturaacquistos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int PagamentoUnificatoFatturaAcquistosCount();
	
	    /// <summary>
	    /// Returns all pagamentounificatofatturaacquistos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int PagamentoUnificatoFatturaAcquistosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new pagamentounificatofatturaacquisto from the given dto object into the database.
	    /// </summary>
	    /// <param name="pagamentounificatofatturaacquisto">The dto object.</param>
	    /// <returns>The dto key of the newly created pagamentounificatofatturaacquisto.</returns>
	    [OperationContract]
	    string CreatePagamentoUnificatoFatturaAcquisto(PagamentoUnificatoFatturaAcquistoDto pagamentounificatofatturaacquisto);
	
	    /// <summary>
	    /// Updates pagamentounificatofatturaacquisto in the database from the given dto object.
	    /// </summary>
	    /// <param name="pagamentounificatofatturaacquisto">The dto object.</param>
	    [OperationContract]
	    void UpdatePagamentoUnificatoFatturaAcquisto(PagamentoUnificatoFatturaAcquistoDto pagamentounificatofatturaacquisto);
	
	    /// <summary>
	    /// Update an existing pagamentounificatofatturaacquistos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="pagamentounificatofatturaacquistos">The dto object list.</param>
	    [OperationContract]
	    void UpdatePagamentoUnificatoFatturaAcquistos(IEnumerable<PagamentoUnificatoFatturaAcquistoDto> pagamentounificatofatturaacquistos);
	
	    /// <summary>
	    /// Deletes pagamentounificatofatturaacquisto from the database by the given dto object.
	    /// </summary>
	    /// <param name="pagamentounificatofatturaacquisto">The dto object.</param>
	    [OperationContract]
	    void DeletePagamentoUnificatoFatturaAcquisto(PagamentoUnificatoFatturaAcquistoDto pagamentounificatofatturaacquisto);
	
	    /// <summary>
	    /// Delete pagamentounificatofatturaacquistos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="pagamentounificatofatturaacquistos">The dto object list.</param>
	    [OperationContract]
	    void DeletePagamentoUnificatoFatturaAcquistos(IEnumerable<PagamentoUnificatoFatturaAcquistoDto> pagamentounificatofatturaacquistos);
	    
	    #endregion
	    
	    #region ReportJobs CRUD Operations
	
	    /// <summary>
	    /// Returns all reportjobs.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ReportJobDto> ReadReportJobs();
	
	    /// <summary>
	    /// Returns a specified amount of reportjobs from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ReportJobDto> ReadReportJobsPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all reportjobs filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ReportJobDto> ReadReportJobsFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of reportjobs from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ReportJobDto> ReadReportJobsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a reportjob with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ReportJobDto ReadReportJob(string dtoKey);
	
	    /// <summary>
	    /// Returns all reportjobs count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ReportJobsCount();
	
	    /// <summary>
	    /// Returns all reportjobs count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ReportJobsCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new reportjob from the given dto object into the database.
	    /// </summary>
	    /// <param name="reportjob">The dto object.</param>
	    /// <returns>The dto key of the newly created reportjob.</returns>
	    [OperationContract]
	    string CreateReportJob(ReportJobDto reportjob);
	
	    /// <summary>
	    /// Updates reportjob in the database from the given dto object.
	    /// </summary>
	    /// <param name="reportjob">The dto object.</param>
	    [OperationContract]
	    void UpdateReportJob(ReportJobDto reportjob);
	
	    /// <summary>
	    /// Update an existing reportjobs in the database from the given dto object list.
	    /// </summary>
	    /// <param name="reportjobs">The dto object list.</param>
	    [OperationContract]
	    void UpdateReportJobs(IEnumerable<ReportJobDto> reportjobs);
	
	    /// <summary>
	    /// Deletes reportjob from the database by the given dto object.
	    /// </summary>
	    /// <param name="reportjob">The dto object.</param>
	    [OperationContract]
	    void DeleteReportJob(ReportJobDto reportjob);
	
	    /// <summary>
	    /// Delete reportjobs from the database by the given dto object list.
	    /// </summary>
	    /// <param name="reportjobs">The dto object list.</param>
	    [OperationContract]
	    void DeleteReportJobs(IEnumerable<ReportJobDto> reportjobs);
	    
	    #endregion
	    
	    #region Resos CRUD Operations
	
	    /// <summary>
	    /// Returns all resos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ResoDto> ReadResos();
	
	    /// <summary>
	    /// Returns a specified amount of resos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ResoDto> ReadResosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all resos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ResoDto> ReadResosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of resos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ResoDto> ReadResosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a reso with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ResoDto ReadReso(string dtoKey);
	
	    /// <summary>
	    /// Returns all resos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ResosCount();
	
	    /// <summary>
	    /// Returns all resos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ResosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new reso from the given dto object into the database.
	    /// </summary>
	    /// <param name="reso">The dto object.</param>
	    /// <returns>The dto key of the newly created reso.</returns>
	    [OperationContract]
	    string CreateReso(ResoDto reso);
	
	    /// <summary>
	    /// Updates reso in the database from the given dto object.
	    /// </summary>
	    /// <param name="reso">The dto object.</param>
	    [OperationContract]
	    void UpdateReso(ResoDto reso);
	
	    /// <summary>
	    /// Update an existing resos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="resos">The dto object list.</param>
	    [OperationContract]
	    void UpdateResos(IEnumerable<ResoDto> resos);
	
	    /// <summary>
	    /// Deletes reso from the database by the given dto object.
	    /// </summary>
	    /// <param name="reso">The dto object.</param>
	    [OperationContract]
	    void DeleteReso(ResoDto reso);
	
	    /// <summary>
	    /// Delete resos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="resos">The dto object list.</param>
	    [OperationContract]
	    void DeleteResos(IEnumerable<ResoDto> resos);
	    
	    #endregion
	    
	    #region SALs CRUD Operations
	
	    /// <summary>
	    /// Returns all sals.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SALDto> ReadSALs();
	
	    /// <summary>
	    /// Returns a specified amount of sals from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SALDto> ReadSALsPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all sals filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SALDto> ReadSALsFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of sals from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SALDto> ReadSALsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a sal with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    SALDto ReadSAL(string dtoKey);
	
	    /// <summary>
	    /// Returns all sals count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int SALsCount();
	
	    /// <summary>
	    /// Returns all sals count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int SALsCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new sal from the given dto object into the database.
	    /// </summary>
	    /// <param name="sal">The dto object.</param>
	    /// <returns>The dto key of the newly created sal.</returns>
	    [OperationContract]
	    string CreateSAL(SALDto sal);
	
	    /// <summary>
	    /// Updates sal in the database from the given dto object.
	    /// </summary>
	    /// <param name="sal">The dto object.</param>
	    [OperationContract]
	    void UpdateSAL(SALDto sal);
	
	    /// <summary>
	    /// Update an existing sals in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sals">The dto object list.</param>
	    [OperationContract]
	    void UpdateSALs(IEnumerable<SALDto> sals);
	
	    /// <summary>
	    /// Deletes sal from the database by the given dto object.
	    /// </summary>
	    /// <param name="sal">The dto object.</param>
	    [OperationContract]
	    void DeleteSAL(SALDto sal);
	
	    /// <summary>
	    /// Delete sals from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sals">The dto object list.</param>
	    [OperationContract]
	    void DeleteSALs(IEnumerable<SALDto> sals);
	    
	    #endregion
	    
	}
}
#pragma warning restore 1591
