#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Code is generated by Telerik Data Access Service Wizard
// using PlainDataService.tt template
    
namespace WcfService
{
	using System.ServiceModel;
	using WcfService.Dto;
	using WcfService.Assemblers;
	using WcfService.Repositories;
	using WcfService.Services;
	using DataLayer;
	using System;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.Serialization;

	/// <summary>
	/// EntitiesModelService service class handler.
	/// </summary>
	[ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)]
	public partial class EntitiesModelService : IEntitiesModelService
	{
	    /// <summary>
	    /// Maintains a list of objects affected by a business transaction and coordinates 
	    /// the writing out of changes and the resolution of concurrency problems.
	    /// </summary>
	    private IEntitiesModelUnitOfWork unitOfWork;
	    
	    /// <summary>
	    /// Get or sets the specific UnitOfWork. It maintains a list of objects affected 
	    /// by a business transaction and coordinates the writing out of changes and the resolution of concurrency problems.
	    /// </summary>
	    public IEntitiesModelUnitOfWork UnitOfWork
	    {
	        get
	        {
	            if(this.unitOfWork == null)
	            {
	                this.unitOfWork = new EntitiesModel();
	            }
	            return this.unitOfWork;
	        }
	        set
	        {
	            this.unitOfWork = value;
	        }
	    }	
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Account entity.
	    /// </summary>
	    private IAccountService accountservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Account entity.
	    /// </summary>
	    public virtual IAccountService AccountService
	    {
	        get
	        {
	            if (this.accountservice == null)
	            {
	                IAccountAssembler assembler = new AccountAssembler();
	                IAccountRepository repository = new AccountRepository(this.UnitOfWork);
	
	                this.accountservice = new AccountService(assembler, repository);
	            }
	            return this.accountservice;
	        }
	    }
	        
	    #region Accounts CRUD Operations
	
	    /// <summary>
	    /// Returns all accounts.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<AccountDto> ReadAccounts()	
	    {
	        return this.AccountService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of accounts from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<AccountDto> ReadAccountsPaged(int startIndex, int pageSize)
	    {
	        return this.AccountService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all accounts filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<AccountDto> ReadAccountsFiltered(string sortExpression, string filterExpression)
	    {
	        return this.AccountService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of accounts from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<AccountDto> ReadAccountsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.AccountService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a account with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public AccountDto ReadAccount(string dtoKey)
	    {
	        return this.AccountService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all accounts count.
	    /// </summary>
	    /// <returns></returns>
	    public int AccountsCount()
	    {
	        return this.AccountService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all accounts count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int AccountsCountFiltered(string filterExpression)
	    {
	        return this.AccountService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new account from the given dto object into the database.
	    /// </summary>
	    /// <param name="account">The dto object.</param>
	    /// <returns>The dto key of the newly created account.</returns>
	    public string CreateAccount(AccountDto account)
	    {
	        string key = this.AccountService.Add(account);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing account in the database from the given dto object.
	    /// </summary>
	    /// <param name="account">The dto object.</param>
	    public void UpdateAccount(AccountDto account)
	    {
	        this.AccountService.Update(account);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update accounts in the database from the given dto object list.
	    /// </summary>
	    /// <param name="accounts">The dto object list.</param>
	    public void UpdateAccounts(IEnumerable<AccountDto> accounts)
	    {
	        if (accounts == null)
	        {
	            return;
	        }
	
	        foreach (AccountDto account in accounts)
	        {
	            if (account == null)
	            {
	                continue;
	            }
	            
	            this.UpdateAccount(account);
	        }
	    }
	
	    /// <summary>
	    /// Deletes account from the database by the given dto object.
	    /// </summary>
	    /// <param name="account">The dto object.</param>
	    public void DeleteAccount(AccountDto account)
	    {
	        this.AccountService.Delete(account);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete accounts from the database by the given dto object list.
	    /// </summary>
	    /// <param name="accounts">The dto object list.</param>
	    public void DeleteAccounts(IEnumerable<AccountDto> accounts)
	    {
	        if (accounts == null)
	        {
	            return;
	        }
	
	        foreach (AccountDto account in accounts)
	        {
	            if (account == null)
	            {
	                continue;
	            }
	            
	            this.DeleteAccount(account);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against AnagraficaArticolo entity.
	    /// </summary>
	    private IAnagraficaArticoloService anagraficaarticoloservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against AnagraficaArticolo entity.
	    /// </summary>
	    public virtual IAnagraficaArticoloService AnagraficaArticoloService
	    {
	        get
	        {
	            if (this.anagraficaarticoloservice == null)
	            {
	                IAnagraficaArticoloAssembler assembler = new AnagraficaArticoloAssembler();
	                IAnagraficaArticoloRepository repository = new AnagraficaArticoloRepository(this.UnitOfWork);
	
	                this.anagraficaarticoloservice = new AnagraficaArticoloService(assembler, repository);
	            }
	            return this.anagraficaarticoloservice;
	        }
	    }
	        
	    #region AnagraficaArticolos CRUD Operations
	
	    /// <summary>
	    /// Returns all anagraficaarticolos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<AnagraficaArticoloDto> ReadAnagraficaArticolos()	
	    {
	        return this.AnagraficaArticoloService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of anagraficaarticolos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<AnagraficaArticoloDto> ReadAnagraficaArticolosPaged(int startIndex, int pageSize)
	    {
	        return this.AnagraficaArticoloService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all anagraficaarticolos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<AnagraficaArticoloDto> ReadAnagraficaArticolosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.AnagraficaArticoloService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of anagraficaarticolos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<AnagraficaArticoloDto> ReadAnagraficaArticolosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.AnagraficaArticoloService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a anagraficaarticolo with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public AnagraficaArticoloDto ReadAnagraficaArticolo(string dtoKey)
	    {
	        return this.AnagraficaArticoloService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all anagraficaarticolos count.
	    /// </summary>
	    /// <returns></returns>
	    public int AnagraficaArticolosCount()
	    {
	        return this.AnagraficaArticoloService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all anagraficaarticolos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int AnagraficaArticolosCountFiltered(string filterExpression)
	    {
	        return this.AnagraficaArticoloService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new anagraficaarticolo from the given dto object into the database.
	    /// </summary>
	    /// <param name="anagraficaarticolo">The dto object.</param>
	    /// <returns>The dto key of the newly created anagraficaarticolo.</returns>
	    public string CreateAnagraficaArticolo(AnagraficaArticoloDto anagraficaarticolo)
	    {
	        string key = this.AnagraficaArticoloService.Add(anagraficaarticolo);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing anagraficaarticolo in the database from the given dto object.
	    /// </summary>
	    /// <param name="anagraficaarticolo">The dto object.</param>
	    public void UpdateAnagraficaArticolo(AnagraficaArticoloDto anagraficaarticolo)
	    {
	        this.AnagraficaArticoloService.Update(anagraficaarticolo);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update anagraficaarticolos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="anagraficaarticolos">The dto object list.</param>
	    public void UpdateAnagraficaArticolos(IEnumerable<AnagraficaArticoloDto> anagraficaarticolos)
	    {
	        if (anagraficaarticolos == null)
	        {
	            return;
	        }
	
	        foreach (AnagraficaArticoloDto anagraficaarticolo in anagraficaarticolos)
	        {
	            if (anagraficaarticolo == null)
	            {
	                continue;
	            }
	            
	            this.UpdateAnagraficaArticolo(anagraficaarticolo);
	        }
	    }
	
	    /// <summary>
	    /// Deletes anagraficaarticolo from the database by the given dto object.
	    /// </summary>
	    /// <param name="anagraficaarticolo">The dto object.</param>
	    public void DeleteAnagraficaArticolo(AnagraficaArticoloDto anagraficaarticolo)
	    {
	        this.AnagraficaArticoloService.Delete(anagraficaarticolo);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete anagraficaarticolos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="anagraficaarticolos">The dto object list.</param>
	    public void DeleteAnagraficaArticolos(IEnumerable<AnagraficaArticoloDto> anagraficaarticolos)
	    {
	        if (anagraficaarticolos == null)
	        {
	            return;
	        }
	
	        foreach (AnagraficaArticoloDto anagraficaarticolo in anagraficaarticolos)
	        {
	            if (anagraficaarticolo == null)
	            {
	                continue;
	            }
	            
	            this.DeleteAnagraficaArticolo(anagraficaarticolo);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against AnagraficaCommittente entity.
	    /// </summary>
	    private IAnagraficaCommittenteService anagraficacommittenteservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against AnagraficaCommittente entity.
	    /// </summary>
	    public virtual IAnagraficaCommittenteService AnagraficaCommittenteService
	    {
	        get
	        {
	            if (this.anagraficacommittenteservice == null)
	            {
	                IAnagraficaCommittenteAssembler assembler = new AnagraficaCommittenteAssembler();
	                IAnagraficaCommittenteRepository repository = new AnagraficaCommittenteRepository(this.UnitOfWork);
	
	                this.anagraficacommittenteservice = new AnagraficaCommittenteService(assembler, repository);
	            }
	            return this.anagraficacommittenteservice;
	        }
	    }
	        
	    #region AnagraficaCommittentes CRUD Operations
	
	    /// <summary>
	    /// Returns all anagraficacommittentes.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<AnagraficaCommittenteDto> ReadAnagraficaCommittentes()	
	    {
	        return this.AnagraficaCommittenteService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of anagraficacommittentes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<AnagraficaCommittenteDto> ReadAnagraficaCommittentesPaged(int startIndex, int pageSize)
	    {
	        return this.AnagraficaCommittenteService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all anagraficacommittentes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<AnagraficaCommittenteDto> ReadAnagraficaCommittentesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.AnagraficaCommittenteService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of anagraficacommittentes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<AnagraficaCommittenteDto> ReadAnagraficaCommittentesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.AnagraficaCommittenteService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a anagraficacommittente with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public AnagraficaCommittenteDto ReadAnagraficaCommittente(string dtoKey)
	    {
	        return this.AnagraficaCommittenteService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all anagraficacommittentes count.
	    /// </summary>
	    /// <returns></returns>
	    public int AnagraficaCommittentesCount()
	    {
	        return this.AnagraficaCommittenteService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all anagraficacommittentes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int AnagraficaCommittentesCountFiltered(string filterExpression)
	    {
	        return this.AnagraficaCommittenteService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new anagraficacommittente from the given dto object into the database.
	    /// </summary>
	    /// <param name="anagraficacommittente">The dto object.</param>
	    /// <returns>The dto key of the newly created anagraficacommittente.</returns>
	    public string CreateAnagraficaCommittente(AnagraficaCommittenteDto anagraficacommittente)
	    {
	        string key = this.AnagraficaCommittenteService.Add(anagraficacommittente);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing anagraficacommittente in the database from the given dto object.
	    /// </summary>
	    /// <param name="anagraficacommittente">The dto object.</param>
	    public void UpdateAnagraficaCommittente(AnagraficaCommittenteDto anagraficacommittente)
	    {
	        this.AnagraficaCommittenteService.Update(anagraficacommittente);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update anagraficacommittentes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="anagraficacommittentes">The dto object list.</param>
	    public void UpdateAnagraficaCommittentes(IEnumerable<AnagraficaCommittenteDto> anagraficacommittentes)
	    {
	        if (anagraficacommittentes == null)
	        {
	            return;
	        }
	
	        foreach (AnagraficaCommittenteDto anagraficacommittente in anagraficacommittentes)
	        {
	            if (anagraficacommittente == null)
	            {
	                continue;
	            }
	            
	            this.UpdateAnagraficaCommittente(anagraficacommittente);
	        }
	    }
	
	    /// <summary>
	    /// Deletes anagraficacommittente from the database by the given dto object.
	    /// </summary>
	    /// <param name="anagraficacommittente">The dto object.</param>
	    public void DeleteAnagraficaCommittente(AnagraficaCommittenteDto anagraficacommittente)
	    {
	        this.AnagraficaCommittenteService.Delete(anagraficacommittente);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete anagraficacommittentes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="anagraficacommittentes">The dto object list.</param>
	    public void DeleteAnagraficaCommittentes(IEnumerable<AnagraficaCommittenteDto> anagraficacommittentes)
	    {
	        if (anagraficacommittentes == null)
	        {
	            return;
	        }
	
	        foreach (AnagraficaCommittenteDto anagraficacommittente in anagraficacommittentes)
	        {
	            if (anagraficacommittente == null)
	            {
	                continue;
	            }
	            
	            this.DeleteAnagraficaCommittente(anagraficacommittente);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against AnagraficaFornitore entity.
	    /// </summary>
	    private IAnagraficaFornitoreService anagraficafornitoreservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against AnagraficaFornitore entity.
	    /// </summary>
	    public virtual IAnagraficaFornitoreService AnagraficaFornitoreService
	    {
	        get
	        {
	            if (this.anagraficafornitoreservice == null)
	            {
	                IAnagraficaFornitoreAssembler assembler = new AnagraficaFornitoreAssembler();
	                IAnagraficaFornitoreRepository repository = new AnagraficaFornitoreRepository(this.UnitOfWork);
	
	                this.anagraficafornitoreservice = new AnagraficaFornitoreService(assembler, repository);
	            }
	            return this.anagraficafornitoreservice;
	        }
	    }
	        
	    #region AnagraficaFornitores CRUD Operations
	
	    /// <summary>
	    /// Returns all anagraficafornitores.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<AnagraficaFornitoreDto> ReadAnagraficaFornitores()	
	    {
	        return this.AnagraficaFornitoreService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of anagraficafornitores from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<AnagraficaFornitoreDto> ReadAnagraficaFornitoresPaged(int startIndex, int pageSize)
	    {
	        return this.AnagraficaFornitoreService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all anagraficafornitores filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<AnagraficaFornitoreDto> ReadAnagraficaFornitoresFiltered(string sortExpression, string filterExpression)
	    {
	        return this.AnagraficaFornitoreService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of anagraficafornitores from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<AnagraficaFornitoreDto> ReadAnagraficaFornitoresPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.AnagraficaFornitoreService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a anagraficafornitore with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public AnagraficaFornitoreDto ReadAnagraficaFornitore(string dtoKey)
	    {
	        return this.AnagraficaFornitoreService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all anagraficafornitores count.
	    /// </summary>
	    /// <returns></returns>
	    public int AnagraficaFornitoresCount()
	    {
	        return this.AnagraficaFornitoreService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all anagraficafornitores count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int AnagraficaFornitoresCountFiltered(string filterExpression)
	    {
	        return this.AnagraficaFornitoreService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new anagraficafornitore from the given dto object into the database.
	    /// </summary>
	    /// <param name="anagraficafornitore">The dto object.</param>
	    /// <returns>The dto key of the newly created anagraficafornitore.</returns>
	    public string CreateAnagraficaFornitore(AnagraficaFornitoreDto anagraficafornitore)
	    {
	        string key = this.AnagraficaFornitoreService.Add(anagraficafornitore);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing anagraficafornitore in the database from the given dto object.
	    /// </summary>
	    /// <param name="anagraficafornitore">The dto object.</param>
	    public void UpdateAnagraficaFornitore(AnagraficaFornitoreDto anagraficafornitore)
	    {
	        this.AnagraficaFornitoreService.Update(anagraficafornitore);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update anagraficafornitores in the database from the given dto object list.
	    /// </summary>
	    /// <param name="anagraficafornitores">The dto object list.</param>
	    public void UpdateAnagraficaFornitores(IEnumerable<AnagraficaFornitoreDto> anagraficafornitores)
	    {
	        if (anagraficafornitores == null)
	        {
	            return;
	        }
	
	        foreach (AnagraficaFornitoreDto anagraficafornitore in anagraficafornitores)
	        {
	            if (anagraficafornitore == null)
	            {
	                continue;
	            }
	            
	            this.UpdateAnagraficaFornitore(anagraficafornitore);
	        }
	    }
	
	    /// <summary>
	    /// Deletes anagraficafornitore from the database by the given dto object.
	    /// </summary>
	    /// <param name="anagraficafornitore">The dto object.</param>
	    public void DeleteAnagraficaFornitore(AnagraficaFornitoreDto anagraficafornitore)
	    {
	        this.AnagraficaFornitoreService.Delete(anagraficafornitore);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete anagraficafornitores from the database by the given dto object list.
	    /// </summary>
	    /// <param name="anagraficafornitores">The dto object list.</param>
	    public void DeleteAnagraficaFornitores(IEnumerable<AnagraficaFornitoreDto> anagraficafornitores)
	    {
	        if (anagraficafornitores == null)
	        {
	            return;
	        }
	
	        foreach (AnagraficaFornitoreDto anagraficafornitore in anagraficafornitores)
	        {
	            if (anagraficafornitore == null)
	            {
	                continue;
	            }
	            
	            this.DeleteAnagraficaFornitore(anagraficafornitore);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Articolo entity.
	    /// </summary>
	    private IArticoloService articoloservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Articolo entity.
	    /// </summary>
	    public virtual IArticoloService ArticoloService
	    {
	        get
	        {
	            if (this.articoloservice == null)
	            {
	                IArticoloAssembler assembler = new ArticoloAssembler();
	                IArticoloRepository repository = new ArticoloRepository(this.UnitOfWork);
	
	                this.articoloservice = new ArticoloService(assembler, repository);
	            }
	            return this.articoloservice;
	        }
	    }
	        
	    #region Articolos CRUD Operations
	
	    /// <summary>
	    /// Returns all articolos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ArticoloDto> ReadArticolos()	
	    {
	        return this.ArticoloService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of articolos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ArticoloDto> ReadArticolosPaged(int startIndex, int pageSize)
	    {
	        return this.ArticoloService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all articolos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ArticoloDto> ReadArticolosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ArticoloService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of articolos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ArticoloDto> ReadArticolosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ArticoloService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a articolo with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ArticoloDto ReadArticolo(string dtoKey)
	    {
	        return this.ArticoloService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all articolos count.
	    /// </summary>
	    /// <returns></returns>
	    public int ArticolosCount()
	    {
	        return this.ArticoloService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all articolos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ArticolosCountFiltered(string filterExpression)
	    {
	        return this.ArticoloService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new articolo from the given dto object into the database.
	    /// </summary>
	    /// <param name="articolo">The dto object.</param>
	    /// <returns>The dto key of the newly created articolo.</returns>
	    public string CreateArticolo(ArticoloDto articolo)
	    {
	        string key = this.ArticoloService.Add(articolo);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing articolo in the database from the given dto object.
	    /// </summary>
	    /// <param name="articolo">The dto object.</param>
	    public void UpdateArticolo(ArticoloDto articolo)
	    {
	        this.ArticoloService.Update(articolo);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update articolos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="articolos">The dto object list.</param>
	    public void UpdateArticolos(IEnumerable<ArticoloDto> articolos)
	    {
	        if (articolos == null)
	        {
	            return;
	        }
	
	        foreach (ArticoloDto articolo in articolos)
	        {
	            if (articolo == null)
	            {
	                continue;
	            }
	            
	            this.UpdateArticolo(articolo);
	        }
	    }
	
	    /// <summary>
	    /// Deletes articolo from the database by the given dto object.
	    /// </summary>
	    /// <param name="articolo">The dto object.</param>
	    public void DeleteArticolo(ArticoloDto articolo)
	    {
	        this.ArticoloService.Delete(articolo);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete articolos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="articolos">The dto object list.</param>
	    public void DeleteArticolos(IEnumerable<ArticoloDto> articolos)
	    {
	        if (articolos == null)
	        {
	            return;
	        }
	
	        foreach (ArticoloDto articolo in articolos)
	        {
	            if (articolo == null)
	            {
	                continue;
	            }
	            
	            this.DeleteArticolo(articolo);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Azienda entity.
	    /// </summary>
	    private IAziendaService aziendaservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Azienda entity.
	    /// </summary>
	    public virtual IAziendaService AziendaService
	    {
	        get
	        {
	            if (this.aziendaservice == null)
	            {
	                IAziendaAssembler assembler = new AziendaAssembler();
	                IAziendaRepository repository = new AziendaRepository(this.UnitOfWork);
	
	                this.aziendaservice = new AziendaService(assembler, repository);
	            }
	            return this.aziendaservice;
	        }
	    }
	        
	    #region Aziendas CRUD Operations
	
	    /// <summary>
	    /// Returns all aziendas.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<AziendaDto> ReadAziendas()	
	    {
	        return this.AziendaService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of aziendas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<AziendaDto> ReadAziendasPaged(int startIndex, int pageSize)
	    {
	        return this.AziendaService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all aziendas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<AziendaDto> ReadAziendasFiltered(string sortExpression, string filterExpression)
	    {
	        return this.AziendaService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of aziendas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<AziendaDto> ReadAziendasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.AziendaService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a azienda with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public AziendaDto ReadAzienda(string dtoKey)
	    {
	        return this.AziendaService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all aziendas count.
	    /// </summary>
	    /// <returns></returns>
	    public int AziendasCount()
	    {
	        return this.AziendaService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all aziendas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int AziendasCountFiltered(string filterExpression)
	    {
	        return this.AziendaService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new azienda from the given dto object into the database.
	    /// </summary>
	    /// <param name="azienda">The dto object.</param>
	    /// <returns>The dto key of the newly created azienda.</returns>
	    public string CreateAzienda(AziendaDto azienda)
	    {
	        string key = this.AziendaService.Add(azienda);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing azienda in the database from the given dto object.
	    /// </summary>
	    /// <param name="azienda">The dto object.</param>
	    public void UpdateAzienda(AziendaDto azienda)
	    {
	        this.AziendaService.Update(azienda);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update aziendas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="aziendas">The dto object list.</param>
	    public void UpdateAziendas(IEnumerable<AziendaDto> aziendas)
	    {
	        if (aziendas == null)
	        {
	            return;
	        }
	
	        foreach (AziendaDto azienda in aziendas)
	        {
	            if (azienda == null)
	            {
	                continue;
	            }
	            
	            this.UpdateAzienda(azienda);
	        }
	    }
	
	    /// <summary>
	    /// Deletes azienda from the database by the given dto object.
	    /// </summary>
	    /// <param name="azienda">The dto object.</param>
	    public void DeleteAzienda(AziendaDto azienda)
	    {
	        this.AziendaService.Delete(azienda);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete aziendas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="aziendas">The dto object list.</param>
	    public void DeleteAziendas(IEnumerable<AziendaDto> aziendas)
	    {
	        if (aziendas == null)
	        {
	            return;
	        }
	
	        foreach (AziendaDto azienda in aziendas)
	        {
	            if (azienda == null)
	            {
	                continue;
	            }
	            
	            this.DeleteAzienda(azienda);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against CentroCosto entity.
	    /// </summary>
	    private ICentroCostoService centrocostoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against CentroCosto entity.
	    /// </summary>
	    public virtual ICentroCostoService CentroCostoService
	    {
	        get
	        {
	            if (this.centrocostoservice == null)
	            {
	                ICentroCostoAssembler assembler = new CentroCostoAssembler();
	                ICentroCostoRepository repository = new CentroCostoRepository(this.UnitOfWork);
	
	                this.centrocostoservice = new CentroCostoService(assembler, repository);
	            }
	            return this.centrocostoservice;
	        }
	    }
	        
	    #region CentroCostos CRUD Operations
	
	    /// <summary>
	    /// Returns all centrocostos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CentroCostoDto> ReadCentroCostos()	
	    {
	        return this.CentroCostoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of centrocostos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CentroCostoDto> ReadCentroCostosPaged(int startIndex, int pageSize)
	    {
	        return this.CentroCostoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all centrocostos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CentroCostoDto> ReadCentroCostosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CentroCostoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of centrocostos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CentroCostoDto> ReadCentroCostosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CentroCostoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a centrocosto with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CentroCostoDto ReadCentroCosto(string dtoKey)
	    {
	        return this.CentroCostoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all centrocostos count.
	    /// </summary>
	    /// <returns></returns>
	    public int CentroCostosCount()
	    {
	        return this.CentroCostoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all centrocostos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CentroCostosCountFiltered(string filterExpression)
	    {
	        return this.CentroCostoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new centrocosto from the given dto object into the database.
	    /// </summary>
	    /// <param name="centrocosto">The dto object.</param>
	    /// <returns>The dto key of the newly created centrocosto.</returns>
	    public string CreateCentroCosto(CentroCostoDto centrocosto)
	    {
	        string key = this.CentroCostoService.Add(centrocosto);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing centrocosto in the database from the given dto object.
	    /// </summary>
	    /// <param name="centrocosto">The dto object.</param>
	    public void UpdateCentroCosto(CentroCostoDto centrocosto)
	    {
	        this.CentroCostoService.Update(centrocosto);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update centrocostos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="centrocostos">The dto object list.</param>
	    public void UpdateCentroCostos(IEnumerable<CentroCostoDto> centrocostos)
	    {
	        if (centrocostos == null)
	        {
	            return;
	        }
	
	        foreach (CentroCostoDto centrocosto in centrocostos)
	        {
	            if (centrocosto == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCentroCosto(centrocosto);
	        }
	    }
	
	    /// <summary>
	    /// Deletes centrocosto from the database by the given dto object.
	    /// </summary>
	    /// <param name="centrocosto">The dto object.</param>
	    public void DeleteCentroCosto(CentroCostoDto centrocosto)
	    {
	        this.CentroCostoService.Delete(centrocosto);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete centrocostos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="centrocostos">The dto object list.</param>
	    public void DeleteCentroCostos(IEnumerable<CentroCostoDto> centrocostos)
	    {
	        if (centrocostos == null)
	        {
	            return;
	        }
	
	        foreach (CentroCostoDto centrocosto in centrocostos)
	        {
	            if (centrocosto == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCentroCosto(centrocosto);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Commessa entity.
	    /// </summary>
	    private ICommessaService commessaservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Commessa entity.
	    /// </summary>
	    public virtual ICommessaService CommessaService
	    {
	        get
	        {
	            if (this.commessaservice == null)
	            {
	                ICommessaAssembler assembler = new CommessaAssembler();
	                ICommessaRepository repository = new CommessaRepository(this.UnitOfWork);
	
	                this.commessaservice = new CommessaService(assembler, repository);
	            }
	            return this.commessaservice;
	        }
	    }
	        
	    #region Commessas CRUD Operations
	
	    /// <summary>
	    /// Returns all commessas.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CommessaDto> ReadCommessas()	
	    {
	        return this.CommessaService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of commessas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CommessaDto> ReadCommessasPaged(int startIndex, int pageSize)
	    {
	        return this.CommessaService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all commessas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CommessaDto> ReadCommessasFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CommessaService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of commessas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CommessaDto> ReadCommessasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CommessaService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a commessa with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CommessaDto ReadCommessa(string dtoKey)
	    {
	        return this.CommessaService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all commessas count.
	    /// </summary>
	    /// <returns></returns>
	    public int CommessasCount()
	    {
	        return this.CommessaService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all commessas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CommessasCountFiltered(string filterExpression)
	    {
	        return this.CommessaService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new commessa from the given dto object into the database.
	    /// </summary>
	    /// <param name="commessa">The dto object.</param>
	    /// <returns>The dto key of the newly created commessa.</returns>
	    public string CreateCommessa(CommessaDto commessa)
	    {
	        string key = this.CommessaService.Add(commessa);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing commessa in the database from the given dto object.
	    /// </summary>
	    /// <param name="commessa">The dto object.</param>
	    public void UpdateCommessa(CommessaDto commessa)
	    {
	        this.CommessaService.Update(commessa);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update commessas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="commessas">The dto object list.</param>
	    public void UpdateCommessas(IEnumerable<CommessaDto> commessas)
	    {
	        if (commessas == null)
	        {
	            return;
	        }
	
	        foreach (CommessaDto commessa in commessas)
	        {
	            if (commessa == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCommessa(commessa);
	        }
	    }
	
	    /// <summary>
	    /// Deletes commessa from the database by the given dto object.
	    /// </summary>
	    /// <param name="commessa">The dto object.</param>
	    public void DeleteCommessa(CommessaDto commessa)
	    {
	        this.CommessaService.Delete(commessa);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete commessas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="commessas">The dto object list.</param>
	    public void DeleteCommessas(IEnumerable<CommessaDto> commessas)
	    {
	        if (commessas == null)
	        {
	            return;
	        }
	
	        foreach (CommessaDto commessa in commessas)
	        {
	            if (commessa == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCommessa(commessa);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Committente entity.
	    /// </summary>
	    private ICommittenteService committenteservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Committente entity.
	    /// </summary>
	    public virtual ICommittenteService CommittenteService
	    {
	        get
	        {
	            if (this.committenteservice == null)
	            {
	                ICommittenteAssembler assembler = new CommittenteAssembler();
	                ICommittenteRepository repository = new CommittenteRepository(this.UnitOfWork);
	
	                this.committenteservice = new CommittenteService(assembler, repository);
	            }
	            return this.committenteservice;
	        }
	    }
	        
	    #region Committentes CRUD Operations
	
	    /// <summary>
	    /// Returns all committentes.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CommittenteDto> ReadCommittentes()	
	    {
	        return this.CommittenteService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of committentes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CommittenteDto> ReadCommittentesPaged(int startIndex, int pageSize)
	    {
	        return this.CommittenteService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all committentes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CommittenteDto> ReadCommittentesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CommittenteService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of committentes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CommittenteDto> ReadCommittentesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CommittenteService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a committente with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CommittenteDto ReadCommittente(string dtoKey)
	    {
	        return this.CommittenteService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all committentes count.
	    /// </summary>
	    /// <returns></returns>
	    public int CommittentesCount()
	    {
	        return this.CommittenteService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all committentes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CommittentesCountFiltered(string filterExpression)
	    {
	        return this.CommittenteService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new committente from the given dto object into the database.
	    /// </summary>
	    /// <param name="committente">The dto object.</param>
	    /// <returns>The dto key of the newly created committente.</returns>
	    public string CreateCommittente(CommittenteDto committente)
	    {
	        string key = this.CommittenteService.Add(committente);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing committente in the database from the given dto object.
	    /// </summary>
	    /// <param name="committente">The dto object.</param>
	    public void UpdateCommittente(CommittenteDto committente)
	    {
	        this.CommittenteService.Update(committente);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update committentes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="committentes">The dto object list.</param>
	    public void UpdateCommittentes(IEnumerable<CommittenteDto> committentes)
	    {
	        if (committentes == null)
	        {
	            return;
	        }
	
	        foreach (CommittenteDto committente in committentes)
	        {
	            if (committente == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCommittente(committente);
	        }
	    }
	
	    /// <summary>
	    /// Deletes committente from the database by the given dto object.
	    /// </summary>
	    /// <param name="committente">The dto object.</param>
	    public void DeleteCommittente(CommittenteDto committente)
	    {
	        this.CommittenteService.Delete(committente);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete committentes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="committentes">The dto object list.</param>
	    public void DeleteCommittentes(IEnumerable<CommittenteDto> committentes)
	    {
	        if (committentes == null)
	        {
	            return;
	        }
	
	        foreach (CommittenteDto committente in committentes)
	        {
	            if (committente == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCommittente(committente);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against FatturaAcquisto entity.
	    /// </summary>
	    private IFatturaAcquistoService fatturaacquistoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against FatturaAcquisto entity.
	    /// </summary>
	    public virtual IFatturaAcquistoService FatturaAcquistoService
	    {
	        get
	        {
	            if (this.fatturaacquistoservice == null)
	            {
	                IFatturaAcquistoAssembler assembler = new FatturaAcquistoAssembler();
	                IFatturaAcquistoRepository repository = new FatturaAcquistoRepository(this.UnitOfWork);
	
	                this.fatturaacquistoservice = new FatturaAcquistoService(assembler, repository);
	            }
	            return this.fatturaacquistoservice;
	        }
	    }
	        
	    #region FatturaAcquistos CRUD Operations
	
	    /// <summary>
	    /// Returns all fatturaacquistos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<FatturaAcquistoDto> ReadFatturaAcquistos()	
	    {
	        return this.FatturaAcquistoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of fatturaacquistos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<FatturaAcquistoDto> ReadFatturaAcquistosPaged(int startIndex, int pageSize)
	    {
	        return this.FatturaAcquistoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all fatturaacquistos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<FatturaAcquistoDto> ReadFatturaAcquistosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.FatturaAcquistoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of fatturaacquistos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<FatturaAcquistoDto> ReadFatturaAcquistosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.FatturaAcquistoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a fatturaacquisto with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public FatturaAcquistoDto ReadFatturaAcquisto(string dtoKey)
	    {
	        return this.FatturaAcquistoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all fatturaacquistos count.
	    /// </summary>
	    /// <returns></returns>
	    public int FatturaAcquistosCount()
	    {
	        return this.FatturaAcquistoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all fatturaacquistos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int FatturaAcquistosCountFiltered(string filterExpression)
	    {
	        return this.FatturaAcquistoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new fatturaacquisto from the given dto object into the database.
	    /// </summary>
	    /// <param name="fatturaacquisto">The dto object.</param>
	    /// <returns>The dto key of the newly created fatturaacquisto.</returns>
	    public string CreateFatturaAcquisto(FatturaAcquistoDto fatturaacquisto)
	    {
	        string key = this.FatturaAcquistoService.Add(fatturaacquisto);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing fatturaacquisto in the database from the given dto object.
	    /// </summary>
	    /// <param name="fatturaacquisto">The dto object.</param>
	    public void UpdateFatturaAcquisto(FatturaAcquistoDto fatturaacquisto)
	    {
	        this.FatturaAcquistoService.Update(fatturaacquisto);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update fatturaacquistos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="fatturaacquistos">The dto object list.</param>
	    public void UpdateFatturaAcquistos(IEnumerable<FatturaAcquistoDto> fatturaacquistos)
	    {
	        if (fatturaacquistos == null)
	        {
	            return;
	        }
	
	        foreach (FatturaAcquistoDto fatturaacquisto in fatturaacquistos)
	        {
	            if (fatturaacquisto == null)
	            {
	                continue;
	            }
	            
	            this.UpdateFatturaAcquisto(fatturaacquisto);
	        }
	    }
	
	    /// <summary>
	    /// Deletes fatturaacquisto from the database by the given dto object.
	    /// </summary>
	    /// <param name="fatturaacquisto">The dto object.</param>
	    public void DeleteFatturaAcquisto(FatturaAcquistoDto fatturaacquisto)
	    {
	        this.FatturaAcquistoService.Delete(fatturaacquisto);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete fatturaacquistos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="fatturaacquistos">The dto object list.</param>
	    public void DeleteFatturaAcquistos(IEnumerable<FatturaAcquistoDto> fatturaacquistos)
	    {
	        if (fatturaacquistos == null)
	        {
	            return;
	        }
	
	        foreach (FatturaAcquistoDto fatturaacquisto in fatturaacquistos)
	        {
	            if (fatturaacquisto == null)
	            {
	                continue;
	            }
	            
	            this.DeleteFatturaAcquisto(fatturaacquisto);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against FatturaVendita entity.
	    /// </summary>
	    private IFatturaVenditaService fatturavenditaservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against FatturaVendita entity.
	    /// </summary>
	    public virtual IFatturaVenditaService FatturaVenditaService
	    {
	        get
	        {
	            if (this.fatturavenditaservice == null)
	            {
	                IFatturaVenditaAssembler assembler = new FatturaVenditaAssembler();
	                IFatturaVenditaRepository repository = new FatturaVenditaRepository(this.UnitOfWork);
	
	                this.fatturavenditaservice = new FatturaVenditaService(assembler, repository);
	            }
	            return this.fatturavenditaservice;
	        }
	    }
	        
	    #region FatturaVenditas CRUD Operations
	
	    /// <summary>
	    /// Returns all fatturavenditas.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<FatturaVenditaDto> ReadFatturaVenditas()	
	    {
	        return this.FatturaVenditaService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of fatturavenditas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<FatturaVenditaDto> ReadFatturaVenditasPaged(int startIndex, int pageSize)
	    {
	        return this.FatturaVenditaService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all fatturavenditas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<FatturaVenditaDto> ReadFatturaVenditasFiltered(string sortExpression, string filterExpression)
	    {
	        return this.FatturaVenditaService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of fatturavenditas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<FatturaVenditaDto> ReadFatturaVenditasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.FatturaVenditaService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a fatturavendita with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public FatturaVenditaDto ReadFatturaVendita(string dtoKey)
	    {
	        return this.FatturaVenditaService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all fatturavenditas count.
	    /// </summary>
	    /// <returns></returns>
	    public int FatturaVenditasCount()
	    {
	        return this.FatturaVenditaService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all fatturavenditas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int FatturaVenditasCountFiltered(string filterExpression)
	    {
	        return this.FatturaVenditaService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new fatturavendita from the given dto object into the database.
	    /// </summary>
	    /// <param name="fatturavendita">The dto object.</param>
	    /// <returns>The dto key of the newly created fatturavendita.</returns>
	    public string CreateFatturaVendita(FatturaVenditaDto fatturavendita)
	    {
	        string key = this.FatturaVenditaService.Add(fatturavendita);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing fatturavendita in the database from the given dto object.
	    /// </summary>
	    /// <param name="fatturavendita">The dto object.</param>
	    public void UpdateFatturaVendita(FatturaVenditaDto fatturavendita)
	    {
	        this.FatturaVenditaService.Update(fatturavendita);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update fatturavenditas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="fatturavenditas">The dto object list.</param>
	    public void UpdateFatturaVenditas(IEnumerable<FatturaVenditaDto> fatturavenditas)
	    {
	        if (fatturavenditas == null)
	        {
	            return;
	        }
	
	        foreach (FatturaVenditaDto fatturavendita in fatturavenditas)
	        {
	            if (fatturavendita == null)
	            {
	                continue;
	            }
	            
	            this.UpdateFatturaVendita(fatturavendita);
	        }
	    }
	
	    /// <summary>
	    /// Deletes fatturavendita from the database by the given dto object.
	    /// </summary>
	    /// <param name="fatturavendita">The dto object.</param>
	    public void DeleteFatturaVendita(FatturaVenditaDto fatturavendita)
	    {
	        this.FatturaVenditaService.Delete(fatturavendita);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete fatturavenditas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="fatturavenditas">The dto object list.</param>
	    public void DeleteFatturaVenditas(IEnumerable<FatturaVenditaDto> fatturavenditas)
	    {
	        if (fatturavenditas == null)
	        {
	            return;
	        }
	
	        foreach (FatturaVenditaDto fatturavendita in fatturavenditas)
	        {
	            if (fatturavendita == null)
	            {
	                continue;
	            }
	            
	            this.DeleteFatturaVendita(fatturavendita);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Fornitore entity.
	    /// </summary>
	    private IFornitoreService fornitoreservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Fornitore entity.
	    /// </summary>
	    public virtual IFornitoreService FornitoreService
	    {
	        get
	        {
	            if (this.fornitoreservice == null)
	            {
	                IFornitoreAssembler assembler = new FornitoreAssembler();
	                IFornitoreRepository repository = new FornitoreRepository(this.UnitOfWork);
	
	                this.fornitoreservice = new FornitoreService(assembler, repository);
	            }
	            return this.fornitoreservice;
	        }
	    }
	        
	    #region Fornitores CRUD Operations
	
	    /// <summary>
	    /// Returns all fornitores.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<FornitoreDto> ReadFornitores()	
	    {
	        return this.FornitoreService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of fornitores from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<FornitoreDto> ReadFornitoresPaged(int startIndex, int pageSize)
	    {
	        return this.FornitoreService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all fornitores filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<FornitoreDto> ReadFornitoresFiltered(string sortExpression, string filterExpression)
	    {
	        return this.FornitoreService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of fornitores from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<FornitoreDto> ReadFornitoresPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.FornitoreService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a fornitore with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public FornitoreDto ReadFornitore(string dtoKey)
	    {
	        return this.FornitoreService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all fornitores count.
	    /// </summary>
	    /// <returns></returns>
	    public int FornitoresCount()
	    {
	        return this.FornitoreService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all fornitores count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int FornitoresCountFiltered(string filterExpression)
	    {
	        return this.FornitoreService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new fornitore from the given dto object into the database.
	    /// </summary>
	    /// <param name="fornitore">The dto object.</param>
	    /// <returns>The dto key of the newly created fornitore.</returns>
	    public string CreateFornitore(FornitoreDto fornitore)
	    {
	        string key = this.FornitoreService.Add(fornitore);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing fornitore in the database from the given dto object.
	    /// </summary>
	    /// <param name="fornitore">The dto object.</param>
	    public void UpdateFornitore(FornitoreDto fornitore)
	    {
	        this.FornitoreService.Update(fornitore);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update fornitores in the database from the given dto object list.
	    /// </summary>
	    /// <param name="fornitores">The dto object list.</param>
	    public void UpdateFornitores(IEnumerable<FornitoreDto> fornitores)
	    {
	        if (fornitores == null)
	        {
	            return;
	        }
	
	        foreach (FornitoreDto fornitore in fornitores)
	        {
	            if (fornitore == null)
	            {
	                continue;
	            }
	            
	            this.UpdateFornitore(fornitore);
	        }
	    }
	
	    /// <summary>
	    /// Deletes fornitore from the database by the given dto object.
	    /// </summary>
	    /// <param name="fornitore">The dto object.</param>
	    public void DeleteFornitore(FornitoreDto fornitore)
	    {
	        this.FornitoreService.Delete(fornitore);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete fornitores from the database by the given dto object list.
	    /// </summary>
	    /// <param name="fornitores">The dto object list.</param>
	    public void DeleteFornitores(IEnumerable<FornitoreDto> fornitores)
	    {
	        if (fornitores == null)
	        {
	            return;
	        }
	
	        foreach (FornitoreDto fornitore in fornitores)
	        {
	            if (fornitore == null)
	            {
	                continue;
	            }
	            
	            this.DeleteFornitore(fornitore);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Incasso entity.
	    /// </summary>
	    private IIncassoService incassoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Incasso entity.
	    /// </summary>
	    public virtual IIncassoService IncassoService
	    {
	        get
	        {
	            if (this.incassoservice == null)
	            {
	                IIncassoAssembler assembler = new IncassoAssembler();
	                IIncassoRepository repository = new IncassoRepository(this.UnitOfWork);
	
	                this.incassoservice = new IncassoService(assembler, repository);
	            }
	            return this.incassoservice;
	        }
	    }
	        
	    #region Incassos CRUD Operations
	
	    /// <summary>
	    /// Returns all incassos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<IncassoDto> ReadIncassos()	
	    {
	        return this.IncassoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of incassos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<IncassoDto> ReadIncassosPaged(int startIndex, int pageSize)
	    {
	        return this.IncassoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all incassos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<IncassoDto> ReadIncassosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.IncassoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of incassos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<IncassoDto> ReadIncassosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.IncassoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a incasso with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public IncassoDto ReadIncasso(string dtoKey)
	    {
	        return this.IncassoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all incassos count.
	    /// </summary>
	    /// <returns></returns>
	    public int IncassosCount()
	    {
	        return this.IncassoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all incassos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int IncassosCountFiltered(string filterExpression)
	    {
	        return this.IncassoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new incasso from the given dto object into the database.
	    /// </summary>
	    /// <param name="incasso">The dto object.</param>
	    /// <returns>The dto key of the newly created incasso.</returns>
	    public string CreateIncasso(IncassoDto incasso)
	    {
	        string key = this.IncassoService.Add(incasso);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing incasso in the database from the given dto object.
	    /// </summary>
	    /// <param name="incasso">The dto object.</param>
	    public void UpdateIncasso(IncassoDto incasso)
	    {
	        this.IncassoService.Update(incasso);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update incassos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="incassos">The dto object list.</param>
	    public void UpdateIncassos(IEnumerable<IncassoDto> incassos)
	    {
	        if (incassos == null)
	        {
	            return;
	        }
	
	        foreach (IncassoDto incasso in incassos)
	        {
	            if (incasso == null)
	            {
	                continue;
	            }
	            
	            this.UpdateIncasso(incasso);
	        }
	    }
	
	    /// <summary>
	    /// Deletes incasso from the database by the given dto object.
	    /// </summary>
	    /// <param name="incasso">The dto object.</param>
	    public void DeleteIncasso(IncassoDto incasso)
	    {
	        this.IncassoService.Delete(incasso);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete incassos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="incassos">The dto object list.</param>
	    public void DeleteIncassos(IEnumerable<IncassoDto> incassos)
	    {
	        if (incassos == null)
	        {
	            return;
	        }
	
	        foreach (IncassoDto incasso in incassos)
	        {
	            if (incasso == null)
	            {
	                continue;
	            }
	            
	            this.DeleteIncasso(incasso);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against NotaCredito entity.
	    /// </summary>
	    private INotaCreditoService notacreditoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against NotaCredito entity.
	    /// </summary>
	    public virtual INotaCreditoService NotaCreditoService
	    {
	        get
	        {
	            if (this.notacreditoservice == null)
	            {
	                INotaCreditoAssembler assembler = new NotaCreditoAssembler();
	                INotaCreditoRepository repository = new NotaCreditoRepository(this.UnitOfWork);
	
	                this.notacreditoservice = new NotaCreditoService(assembler, repository);
	            }
	            return this.notacreditoservice;
	        }
	    }
	        
	    #region NotaCreditos CRUD Operations
	
	    /// <summary>
	    /// Returns all notacreditos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<NotaCreditoDto> ReadNotaCreditos()	
	    {
	        return this.NotaCreditoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of notacreditos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<NotaCreditoDto> ReadNotaCreditosPaged(int startIndex, int pageSize)
	    {
	        return this.NotaCreditoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all notacreditos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<NotaCreditoDto> ReadNotaCreditosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.NotaCreditoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of notacreditos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<NotaCreditoDto> ReadNotaCreditosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.NotaCreditoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a notacredito with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public NotaCreditoDto ReadNotaCredito(string dtoKey)
	    {
	        return this.NotaCreditoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all notacreditos count.
	    /// </summary>
	    /// <returns></returns>
	    public int NotaCreditosCount()
	    {
	        return this.NotaCreditoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all notacreditos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int NotaCreditosCountFiltered(string filterExpression)
	    {
	        return this.NotaCreditoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new notacredito from the given dto object into the database.
	    /// </summary>
	    /// <param name="notacredito">The dto object.</param>
	    /// <returns>The dto key of the newly created notacredito.</returns>
	    public string CreateNotaCredito(NotaCreditoDto notacredito)
	    {
	        string key = this.NotaCreditoService.Add(notacredito);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing notacredito in the database from the given dto object.
	    /// </summary>
	    /// <param name="notacredito">The dto object.</param>
	    public void UpdateNotaCredito(NotaCreditoDto notacredito)
	    {
	        this.NotaCreditoService.Update(notacredito);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update notacreditos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="notacreditos">The dto object list.</param>
	    public void UpdateNotaCreditos(IEnumerable<NotaCreditoDto> notacreditos)
	    {
	        if (notacreditos == null)
	        {
	            return;
	        }
	
	        foreach (NotaCreditoDto notacredito in notacreditos)
	        {
	            if (notacredito == null)
	            {
	                continue;
	            }
	            
	            this.UpdateNotaCredito(notacredito);
	        }
	    }
	
	    /// <summary>
	    /// Deletes notacredito from the database by the given dto object.
	    /// </summary>
	    /// <param name="notacredito">The dto object.</param>
	    public void DeleteNotaCredito(NotaCreditoDto notacredito)
	    {
	        this.NotaCreditoService.Delete(notacredito);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete notacreditos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="notacreditos">The dto object list.</param>
	    public void DeleteNotaCreditos(IEnumerable<NotaCreditoDto> notacreditos)
	    {
	        if (notacreditos == null)
	        {
	            return;
	        }
	
	        foreach (NotaCreditoDto notacredito in notacreditos)
	        {
	            if (notacredito == null)
	            {
	                continue;
	            }
	            
	            this.DeleteNotaCredito(notacredito);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Pagamento entity.
	    /// </summary>
	    private IPagamentoService pagamentoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Pagamento entity.
	    /// </summary>
	    public virtual IPagamentoService PagamentoService
	    {
	        get
	        {
	            if (this.pagamentoservice == null)
	            {
	                IPagamentoAssembler assembler = new PagamentoAssembler();
	                IPagamentoRepository repository = new PagamentoRepository(this.UnitOfWork);
	
	                this.pagamentoservice = new PagamentoService(assembler, repository);
	            }
	            return this.pagamentoservice;
	        }
	    }
	        
	    #region Pagamentos CRUD Operations
	
	    /// <summary>
	    /// Returns all pagamentos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<PagamentoDto> ReadPagamentos()	
	    {
	        return this.PagamentoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of pagamentos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<PagamentoDto> ReadPagamentosPaged(int startIndex, int pageSize)
	    {
	        return this.PagamentoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all pagamentos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PagamentoDto> ReadPagamentosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.PagamentoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of pagamentos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PagamentoDto> ReadPagamentosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.PagamentoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a pagamento with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public PagamentoDto ReadPagamento(string dtoKey)
	    {
	        return this.PagamentoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all pagamentos count.
	    /// </summary>
	    /// <returns></returns>
	    public int PagamentosCount()
	    {
	        return this.PagamentoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all pagamentos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int PagamentosCountFiltered(string filterExpression)
	    {
	        return this.PagamentoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new pagamento from the given dto object into the database.
	    /// </summary>
	    /// <param name="pagamento">The dto object.</param>
	    /// <returns>The dto key of the newly created pagamento.</returns>
	    public string CreatePagamento(PagamentoDto pagamento)
	    {
	        string key = this.PagamentoService.Add(pagamento);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing pagamento in the database from the given dto object.
	    /// </summary>
	    /// <param name="pagamento">The dto object.</param>
	    public void UpdatePagamento(PagamentoDto pagamento)
	    {
	        this.PagamentoService.Update(pagamento);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update pagamentos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="pagamentos">The dto object list.</param>
	    public void UpdatePagamentos(IEnumerable<PagamentoDto> pagamentos)
	    {
	        if (pagamentos == null)
	        {
	            return;
	        }
	
	        foreach (PagamentoDto pagamento in pagamentos)
	        {
	            if (pagamento == null)
	            {
	                continue;
	            }
	            
	            this.UpdatePagamento(pagamento);
	        }
	    }
	
	    /// <summary>
	    /// Deletes pagamento from the database by the given dto object.
	    /// </summary>
	    /// <param name="pagamento">The dto object.</param>
	    public void DeletePagamento(PagamentoDto pagamento)
	    {
	        this.PagamentoService.Delete(pagamento);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete pagamentos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="pagamentos">The dto object list.</param>
	    public void DeletePagamentos(IEnumerable<PagamentoDto> pagamentos)
	    {
	        if (pagamentos == null)
	        {
	            return;
	        }
	
	        foreach (PagamentoDto pagamento in pagamentos)
	        {
	            if (pagamento == null)
	            {
	                continue;
	            }
	            
	            this.DeletePagamento(pagamento);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against PagamentoUnificato entity.
	    /// </summary>
	    private IPagamentoUnificatoService pagamentounificatoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against PagamentoUnificato entity.
	    /// </summary>
	    public virtual IPagamentoUnificatoService PagamentoUnificatoService
	    {
	        get
	        {
	            if (this.pagamentounificatoservice == null)
	            {
	                IPagamentoUnificatoAssembler assembler = new PagamentoUnificatoAssembler();
	                IPagamentoUnificatoRepository repository = new PagamentoUnificatoRepository(this.UnitOfWork);
	
	                this.pagamentounificatoservice = new PagamentoUnificatoService(assembler, repository);
	            }
	            return this.pagamentounificatoservice;
	        }
	    }
	        
	    #region PagamentoUnificatos CRUD Operations
	
	    /// <summary>
	    /// Returns all pagamentounificatos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<PagamentoUnificatoDto> ReadPagamentoUnificatos()	
	    {
	        return this.PagamentoUnificatoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of pagamentounificatos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<PagamentoUnificatoDto> ReadPagamentoUnificatosPaged(int startIndex, int pageSize)
	    {
	        return this.PagamentoUnificatoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all pagamentounificatos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PagamentoUnificatoDto> ReadPagamentoUnificatosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.PagamentoUnificatoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of pagamentounificatos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PagamentoUnificatoDto> ReadPagamentoUnificatosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.PagamentoUnificatoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a pagamentounificato with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public PagamentoUnificatoDto ReadPagamentoUnificato(string dtoKey)
	    {
	        return this.PagamentoUnificatoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all pagamentounificatos count.
	    /// </summary>
	    /// <returns></returns>
	    public int PagamentoUnificatosCount()
	    {
	        return this.PagamentoUnificatoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all pagamentounificatos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int PagamentoUnificatosCountFiltered(string filterExpression)
	    {
	        return this.PagamentoUnificatoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new pagamentounificato from the given dto object into the database.
	    /// </summary>
	    /// <param name="pagamentounificato">The dto object.</param>
	    /// <returns>The dto key of the newly created pagamentounificato.</returns>
	    public string CreatePagamentoUnificato(PagamentoUnificatoDto pagamentounificato)
	    {
	        string key = this.PagamentoUnificatoService.Add(pagamentounificato);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing pagamentounificato in the database from the given dto object.
	    /// </summary>
	    /// <param name="pagamentounificato">The dto object.</param>
	    public void UpdatePagamentoUnificato(PagamentoUnificatoDto pagamentounificato)
	    {
	        this.PagamentoUnificatoService.Update(pagamentounificato);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update pagamentounificatos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="pagamentounificatos">The dto object list.</param>
	    public void UpdatePagamentoUnificatos(IEnumerable<PagamentoUnificatoDto> pagamentounificatos)
	    {
	        if (pagamentounificatos == null)
	        {
	            return;
	        }
	
	        foreach (PagamentoUnificatoDto pagamentounificato in pagamentounificatos)
	        {
	            if (pagamentounificato == null)
	            {
	                continue;
	            }
	            
	            this.UpdatePagamentoUnificato(pagamentounificato);
	        }
	    }
	
	    /// <summary>
	    /// Deletes pagamentounificato from the database by the given dto object.
	    /// </summary>
	    /// <param name="pagamentounificato">The dto object.</param>
	    public void DeletePagamentoUnificato(PagamentoUnificatoDto pagamentounificato)
	    {
	        this.PagamentoUnificatoService.Delete(pagamentounificato);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete pagamentounificatos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="pagamentounificatos">The dto object list.</param>
	    public void DeletePagamentoUnificatos(IEnumerable<PagamentoUnificatoDto> pagamentounificatos)
	    {
	        if (pagamentounificatos == null)
	        {
	            return;
	        }
	
	        foreach (PagamentoUnificatoDto pagamentounificato in pagamentounificatos)
	        {
	            if (pagamentounificato == null)
	            {
	                continue;
	            }
	            
	            this.DeletePagamentoUnificato(pagamentounificato);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against PagamentoUnificatoFatturaAcquisto entity.
	    /// </summary>
	    private IPagamentoUnificatoFatturaAcquistoService pagamentounificatofatturaacquistoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against PagamentoUnificatoFatturaAcquisto entity.
	    /// </summary>
	    public virtual IPagamentoUnificatoFatturaAcquistoService PagamentoUnificatoFatturaAcquistoService
	    {
	        get
	        {
	            if (this.pagamentounificatofatturaacquistoservice == null)
	            {
	                IPagamentoUnificatoFatturaAcquistoAssembler assembler = new PagamentoUnificatoFatturaAcquistoAssembler();
	                IPagamentoUnificatoFatturaAcquistoRepository repository = new PagamentoUnificatoFatturaAcquistoRepository(this.UnitOfWork);
	
	                this.pagamentounificatofatturaacquistoservice = new PagamentoUnificatoFatturaAcquistoService(assembler, repository);
	            }
	            return this.pagamentounificatofatturaacquistoservice;
	        }
	    }
	        
	    #region PagamentoUnificatoFatturaAcquistos CRUD Operations
	
	    /// <summary>
	    /// Returns all pagamentounificatofatturaacquistos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<PagamentoUnificatoFatturaAcquistoDto> ReadPagamentoUnificatoFatturaAcquistos()	
	    {
	        return this.PagamentoUnificatoFatturaAcquistoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of pagamentounificatofatturaacquistos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<PagamentoUnificatoFatturaAcquistoDto> ReadPagamentoUnificatoFatturaAcquistosPaged(int startIndex, int pageSize)
	    {
	        return this.PagamentoUnificatoFatturaAcquistoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all pagamentounificatofatturaacquistos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PagamentoUnificatoFatturaAcquistoDto> ReadPagamentoUnificatoFatturaAcquistosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.PagamentoUnificatoFatturaAcquistoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of pagamentounificatofatturaacquistos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PagamentoUnificatoFatturaAcquistoDto> ReadPagamentoUnificatoFatturaAcquistosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.PagamentoUnificatoFatturaAcquistoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a pagamentounificatofatturaacquisto with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public PagamentoUnificatoFatturaAcquistoDto ReadPagamentoUnificatoFatturaAcquisto(string dtoKey)
	    {
	        return this.PagamentoUnificatoFatturaAcquistoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all pagamentounificatofatturaacquistos count.
	    /// </summary>
	    /// <returns></returns>
	    public int PagamentoUnificatoFatturaAcquistosCount()
	    {
	        return this.PagamentoUnificatoFatturaAcquistoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all pagamentounificatofatturaacquistos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int PagamentoUnificatoFatturaAcquistosCountFiltered(string filterExpression)
	    {
	        return this.PagamentoUnificatoFatturaAcquistoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new pagamentounificatofatturaacquisto from the given dto object into the database.
	    /// </summary>
	    /// <param name="pagamentounificatofatturaacquisto">The dto object.</param>
	    /// <returns>The dto key of the newly created pagamentounificatofatturaacquisto.</returns>
	    public string CreatePagamentoUnificatoFatturaAcquisto(PagamentoUnificatoFatturaAcquistoDto pagamentounificatofatturaacquisto)
	    {
	        string key = this.PagamentoUnificatoFatturaAcquistoService.Add(pagamentounificatofatturaacquisto);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing pagamentounificatofatturaacquisto in the database from the given dto object.
	    /// </summary>
	    /// <param name="pagamentounificatofatturaacquisto">The dto object.</param>
	    public void UpdatePagamentoUnificatoFatturaAcquisto(PagamentoUnificatoFatturaAcquistoDto pagamentounificatofatturaacquisto)
	    {
	        this.PagamentoUnificatoFatturaAcquistoService.Update(pagamentounificatofatturaacquisto);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update pagamentounificatofatturaacquistos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="pagamentounificatofatturaacquistos">The dto object list.</param>
	    public void UpdatePagamentoUnificatoFatturaAcquistos(IEnumerable<PagamentoUnificatoFatturaAcquistoDto> pagamentounificatofatturaacquistos)
	    {
	        if (pagamentounificatofatturaacquistos == null)
	        {
	            return;
	        }
	
	        foreach (PagamentoUnificatoFatturaAcquistoDto pagamentounificatofatturaacquisto in pagamentounificatofatturaacquistos)
	        {
	            if (pagamentounificatofatturaacquisto == null)
	            {
	                continue;
	            }
	            
	            this.UpdatePagamentoUnificatoFatturaAcquisto(pagamentounificatofatturaacquisto);
	        }
	    }
	
	    /// <summary>
	    /// Deletes pagamentounificatofatturaacquisto from the database by the given dto object.
	    /// </summary>
	    /// <param name="pagamentounificatofatturaacquisto">The dto object.</param>
	    public void DeletePagamentoUnificatoFatturaAcquisto(PagamentoUnificatoFatturaAcquistoDto pagamentounificatofatturaacquisto)
	    {
	        this.PagamentoUnificatoFatturaAcquistoService.Delete(pagamentounificatofatturaacquisto);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete pagamentounificatofatturaacquistos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="pagamentounificatofatturaacquistos">The dto object list.</param>
	    public void DeletePagamentoUnificatoFatturaAcquistos(IEnumerable<PagamentoUnificatoFatturaAcquistoDto> pagamentounificatofatturaacquistos)
	    {
	        if (pagamentounificatofatturaacquistos == null)
	        {
	            return;
	        }
	
	        foreach (PagamentoUnificatoFatturaAcquistoDto pagamentounificatofatturaacquisto in pagamentounificatofatturaacquistos)
	        {
	            if (pagamentounificatofatturaacquisto == null)
	            {
	                continue;
	            }
	            
	            this.DeletePagamentoUnificatoFatturaAcquisto(pagamentounificatofatturaacquisto);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against ReportJob entity.
	    /// </summary>
	    private IReportJobService reportjobservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against ReportJob entity.
	    /// </summary>
	    public virtual IReportJobService ReportJobService
	    {
	        get
	        {
	            if (this.reportjobservice == null)
	            {
	                IReportJobAssembler assembler = new ReportJobAssembler();
	                IReportJobRepository repository = new ReportJobRepository(this.UnitOfWork);
	
	                this.reportjobservice = new ReportJobService(assembler, repository);
	            }
	            return this.reportjobservice;
	        }
	    }
	        
	    #region ReportJobs CRUD Operations
	
	    /// <summary>
	    /// Returns all reportjobs.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ReportJobDto> ReadReportJobs()	
	    {
	        return this.ReportJobService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of reportjobs from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ReportJobDto> ReadReportJobsPaged(int startIndex, int pageSize)
	    {
	        return this.ReportJobService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all reportjobs filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ReportJobDto> ReadReportJobsFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ReportJobService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of reportjobs from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ReportJobDto> ReadReportJobsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ReportJobService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a reportjob with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ReportJobDto ReadReportJob(string dtoKey)
	    {
	        return this.ReportJobService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all reportjobs count.
	    /// </summary>
	    /// <returns></returns>
	    public int ReportJobsCount()
	    {
	        return this.ReportJobService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all reportjobs count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ReportJobsCountFiltered(string filterExpression)
	    {
	        return this.ReportJobService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new reportjob from the given dto object into the database.
	    /// </summary>
	    /// <param name="reportjob">The dto object.</param>
	    /// <returns>The dto key of the newly created reportjob.</returns>
	    public string CreateReportJob(ReportJobDto reportjob)
	    {
	        string key = this.ReportJobService.Add(reportjob);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing reportjob in the database from the given dto object.
	    /// </summary>
	    /// <param name="reportjob">The dto object.</param>
	    public void UpdateReportJob(ReportJobDto reportjob)
	    {
	        this.ReportJobService.Update(reportjob);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update reportjobs in the database from the given dto object list.
	    /// </summary>
	    /// <param name="reportjobs">The dto object list.</param>
	    public void UpdateReportJobs(IEnumerable<ReportJobDto> reportjobs)
	    {
	        if (reportjobs == null)
	        {
	            return;
	        }
	
	        foreach (ReportJobDto reportjob in reportjobs)
	        {
	            if (reportjob == null)
	            {
	                continue;
	            }
	            
	            this.UpdateReportJob(reportjob);
	        }
	    }
	
	    /// <summary>
	    /// Deletes reportjob from the database by the given dto object.
	    /// </summary>
	    /// <param name="reportjob">The dto object.</param>
	    public void DeleteReportJob(ReportJobDto reportjob)
	    {
	        this.ReportJobService.Delete(reportjob);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete reportjobs from the database by the given dto object list.
	    /// </summary>
	    /// <param name="reportjobs">The dto object list.</param>
	    public void DeleteReportJobs(IEnumerable<ReportJobDto> reportjobs)
	    {
	        if (reportjobs == null)
	        {
	            return;
	        }
	
	        foreach (ReportJobDto reportjob in reportjobs)
	        {
	            if (reportjob == null)
	            {
	                continue;
	            }
	            
	            this.DeleteReportJob(reportjob);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Reso entity.
	    /// </summary>
	    private IResoService resoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Reso entity.
	    /// </summary>
	    public virtual IResoService ResoService
	    {
	        get
	        {
	            if (this.resoservice == null)
	            {
	                IResoAssembler assembler = new ResoAssembler();
	                IResoRepository repository = new ResoRepository(this.UnitOfWork);
	
	                this.resoservice = new ResoService(assembler, repository);
	            }
	            return this.resoservice;
	        }
	    }
	        
	    #region Resos CRUD Operations
	
	    /// <summary>
	    /// Returns all resos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ResoDto> ReadResos()	
	    {
	        return this.ResoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of resos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ResoDto> ReadResosPaged(int startIndex, int pageSize)
	    {
	        return this.ResoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all resos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ResoDto> ReadResosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ResoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of resos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ResoDto> ReadResosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ResoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a reso with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ResoDto ReadReso(string dtoKey)
	    {
	        return this.ResoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all resos count.
	    /// </summary>
	    /// <returns></returns>
	    public int ResosCount()
	    {
	        return this.ResoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all resos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ResosCountFiltered(string filterExpression)
	    {
	        return this.ResoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new reso from the given dto object into the database.
	    /// </summary>
	    /// <param name="reso">The dto object.</param>
	    /// <returns>The dto key of the newly created reso.</returns>
	    public string CreateReso(ResoDto reso)
	    {
	        string key = this.ResoService.Add(reso);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing reso in the database from the given dto object.
	    /// </summary>
	    /// <param name="reso">The dto object.</param>
	    public void UpdateReso(ResoDto reso)
	    {
	        this.ResoService.Update(reso);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update resos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="resos">The dto object list.</param>
	    public void UpdateResos(IEnumerable<ResoDto> resos)
	    {
	        if (resos == null)
	        {
	            return;
	        }
	
	        foreach (ResoDto reso in resos)
	        {
	            if (reso == null)
	            {
	                continue;
	            }
	            
	            this.UpdateReso(reso);
	        }
	    }
	
	    /// <summary>
	    /// Deletes reso from the database by the given dto object.
	    /// </summary>
	    /// <param name="reso">The dto object.</param>
	    public void DeleteReso(ResoDto reso)
	    {
	        this.ResoService.Delete(reso);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete resos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="resos">The dto object list.</param>
	    public void DeleteResos(IEnumerable<ResoDto> resos)
	    {
	        if (resos == null)
	        {
	            return;
	        }
	
	        foreach (ResoDto reso in resos)
	        {
	            if (reso == null)
	            {
	                continue;
	            }
	            
	            this.DeleteReso(reso);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against SAL entity.
	    /// </summary>
	    private ISALService salservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against SAL entity.
	    /// </summary>
	    public virtual ISALService SALService
	    {
	        get
	        {
	            if (this.salservice == null)
	            {
	                ISALAssembler assembler = new SALAssembler();
	                ISALRepository repository = new SALRepository(this.UnitOfWork);
	
	                this.salservice = new SALService(assembler, repository);
	            }
	            return this.salservice;
	        }
	    }
	        
	    #region SALs CRUD Operations
	
	    /// <summary>
	    /// Returns all sals.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<SALDto> ReadSALs()	
	    {
	        return this.SALService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sals from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<SALDto> ReadSALsPaged(int startIndex, int pageSize)
	    {
	        return this.SALService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all sals filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SALDto> ReadSALsFiltered(string sortExpression, string filterExpression)
	    {
	        return this.SALService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of sals from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SALDto> ReadSALsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.SALService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a sal with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public SALDto ReadSAL(string dtoKey)
	    {
	        return this.SALService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all sals count.
	    /// </summary>
	    /// <returns></returns>
	    public int SALsCount()
	    {
	        return this.SALService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all sals count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int SALsCountFiltered(string filterExpression)
	    {
	        return this.SALService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new sal from the given dto object into the database.
	    /// </summary>
	    /// <param name="sal">The dto object.</param>
	    /// <returns>The dto key of the newly created sal.</returns>
	    public string CreateSAL(SALDto sal)
	    {
	        string key = this.SALService.Add(sal);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing sal in the database from the given dto object.
	    /// </summary>
	    /// <param name="sal">The dto object.</param>
	    public void UpdateSAL(SALDto sal)
	    {
	        this.SALService.Update(sal);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update sals in the database from the given dto object list.
	    /// </summary>
	    /// <param name="sals">The dto object list.</param>
	    public void UpdateSALs(IEnumerable<SALDto> sals)
	    {
	        if (sals == null)
	        {
	            return;
	        }
	
	        foreach (SALDto sal in sals)
	        {
	            if (sal == null)
	            {
	                continue;
	            }
	            
	            this.UpdateSAL(sal);
	        }
	    }
	
	    /// <summary>
	    /// Deletes sal from the database by the given dto object.
	    /// </summary>
	    /// <param name="sal">The dto object.</param>
	    public void DeleteSAL(SALDto sal)
	    {
	        this.SALService.Delete(sal);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete sals from the database by the given dto object list.
	    /// </summary>
	    /// <param name="sals">The dto object list.</param>
	    public void DeleteSALs(IEnumerable<SALDto> sals)
	    {
	        if (sals == null)
	        {
	            return;
	        }
	
	        foreach (SALDto sal in sals)
	        {
	            if (sal == null)
	            {
	                continue;
	            }
	            
	            this.DeleteSAL(sal);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// EntitiesModelService finalizer.
	    /// </summary>
	    ~EntitiesModelService()
	    {
	        IDisposable context = this.unitOfWork as IDisposable;
	        if(context != null)
	        {
	            context.Dispose();
	        }
	    }
	}
}
#pragma warning restore 1591
